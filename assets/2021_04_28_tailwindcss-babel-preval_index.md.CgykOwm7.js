import{_ as i,a,o as n,X as t}from"./chunks/framework.Cp7KI1mb.js";const c=JSON.parse('{"title":"tailwindcss の config ファイルを babel-plugin-preval で読み込む","description":"","frontmatter":{"layout":"post","title":"tailwindcss の config ファイルを babel-plugin-preval で読み込む","category":"programming","tags":["Node.js","tailwindcss","typescript","TIL"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2021/04/28/tailwindcss-babel-preval/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2021/04/28/tailwindcss-babel-preval/"}],["meta",{"property":"og:title","content":"tailwindcss の config ファイルを babel-plugin-preval で読み込む"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2021/04/28/tailwindcss-babel-preval/ogp.png"}]]},"headers":[],"relativePath":"2021/04/28/tailwindcss-babel-preval/index.md","filePath":"posts/2021/2021-04-28-tailwindcss-babel-preval.md","date":{"time":"2021-04-28","string":"April 28, 2021","year":"2021","month":"04","day":"28"}}'),e={name:"2021/04/28/tailwindcss-babel-preval/index.md"};function l(p,s,h,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<p>tailwindcss の tailwind.config.js をコードから参照したいとき、なにも考えなくていいなら <code>tailwindcss/resolveConfig</code> を使えば実現できる。</p><p>ただこのやり方だとビルド時にだけあればいいプラグインなどが依存関係に入ってきてしまい、成果物が肥大化してしまう。</p><p>そこで<a href="https://tailwindcss.com/docs/configuration#referencing-in-java-script" target="_blank" rel="noreferrer">公式ドキュメント</a>では <a href="https://github.com/kentcdodds/babel-plugin-preval" target="_blank" rel="noreferrer"><code>babel-plugin-preval</code></a> 使うといいよ、って書いてあるけどじゃあ実際どう使うの、ということは書いてない。</p><p>こうやる。</p><p>場所はどこでもいいんだけど、 babel が解決できる場所に下記のような内容のファイルを作成する。今回は <code>./config/tailwindcss.js</code> とした。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @preval</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// babel-plugin-prevalでコンパイル時に実行される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// see https://tailwindcss.com/docs/configuration#referencing-in-java-script</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resolveConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tailwindcss/resolveConfig&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tailwindConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../tailwind.config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tailwindConfig)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  colors: config.theme.colors,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>いくつか書き方があるけど、今回は <code>@preval</code> を使う。<br> 今回は colors だけ export しているけど、用途に応じて <code>config.theme</code> を export したり、いろいろできる。</p><p>babel-plugin-preval はトランスパイルなしで実行されるので、実行環境でそのまま動かせるコードを書く必要がある。<br> また、最終的な成果物も同様である(っぽい)。<code>export default {...}</code> ではなく <code>module.exports = {...}</code> にしているのはそのため。</p><p>babel の設定に preval プラグインを追加したら、あとはコンパイルするだけ。</p><p>コードからは</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { colors } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;~/config/tailwindcss&#39;</span></span></code></pre></div><p>的に参照できる。</p><p>TypeScript の場合は好きに型定義したらいい</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;~/config/tailwindcss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // \`~/tailwind.config.js\` のtheme.colorsと対応</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TailwindColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 色定義</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> colors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TailwindColors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
