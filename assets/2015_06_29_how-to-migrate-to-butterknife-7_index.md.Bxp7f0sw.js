import{_ as t,a,o as n,X as o}from"./chunks/framework.Cp7KI1mb.js";const u=JSON.parse('{"title":"(Android) ButterKnife 7.0への移行ガイド","description":"","frontmatter":{"layout":"post","title":"(Android) ButterKnife 7.0への移行ガイド","category":"programming","tags":["Android","java"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2015/06/29/how-to-migrate-to-butterknife-7/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2015/06/29/how-to-migrate-to-butterknife-7/"}],["meta",{"property":"og:title","content":"(Android) ButterKnife 7.0への移行ガイド"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2015/06/29/how-to-migrate-to-butterknife-7/ogp.png"}]]},"headers":[],"relativePath":"2015/06/29/how-to-migrate-to-butterknife-7/index.md","filePath":"posts/2015/2015-06-29-how-to-migrate-to-butterknife-7.md","date":{"time":"2015-06-29","string":"June 29, 2015","year":"2015","month":"06","day":"29"}}'),i={name:"2015/06/29/how-to-migrate-to-butterknife-7/index.md"};function r(s,e,d,c,l,p){return n(),a("div",null,[...e[0]||(e[0]=[o(`<p>2015/06/28、<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noreferrer">ButterKnife</a>の7.0.0がリリースされました。<br> 6.x系からAPIの変更が何点かあるので、簡単に移行手順をまとめます</p><h2 id="アノテーション" tabindex="-1">アノテーション <a class="header-anchor" href="#アノテーション" aria-label="Permalink to &quot;アノテーション&quot;">​</a></h2><h3 id="injectview-injectviews-bind" tabindex="-1"><code>@InjectView/@InjectViews</code> -&gt; <code>@Bind</code> <a class="header-anchor" href="#injectview-injectviews-bind" aria-label="Permalink to &quot;\`@InjectView/@InjectViews\` -&gt; \`@Bind\`&quot;">​</a></h3><p>Viewを変数にひもづけるアノテーションが、<code>@Bind</code>に変更になりました。<br> 複数の場合も<code>@Bind</code>です。とりあえず全部置換しましょう。</p><h3 id="optionalの廃止" tabindex="-1"><code>@Optional</code>の廃止 <a class="header-anchor" href="#optionalの廃止" aria-label="Permalink to &quot;\`@Optional\`の廃止&quot;">​</a></h3><p>レイアウトに存在しないかもしれないViewの時、今までは<code>@Optional</code>を利用していましたが、7.0からは<code>@Nullable</code>を使います。support-annotationsライブラリの<code>@Nullable</code>でも、別のライブラリの<code>@Nullable</code>でも構わないようです。</p><h2 id="メソッド名" tabindex="-1">メソッド名 <a class="header-anchor" href="#メソッド名" aria-label="Permalink to &quot;メソッド名&quot;">​</a></h2><p>下記のように変更になっています。</p><p><code>ButterKnife.inject</code> -&gt; <code>ButterKnife.bind</code><br><code>ButterKnife.reset</code> -&gt; <code>ButterKnife.unbind</code></p><h2 id="proguard設定" tabindex="-1">Proguard設定 <a class="header-anchor" href="#proguard設定" aria-label="Permalink to &quot;Proguard設定&quot;">​</a></h2><p>ButterKnifeによって自動生成されるクラス名が<code>FooActivity$$ViewInjector</code>から<code>FooActivity$$ViewBinder</code>に変更されたので、Proguard設定も変える必要があります。<br> 下記のようになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-keep class butterknife.** { *; }</span></span>
<span class="line"><span>-dontwarn butterknife.internal.**</span></span>
<span class="line"><span>-keep class **$$ViewBinder { *; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-keepclasseswithmembernames class * {</span></span>
<span class="line"><span>    @butterknife.* &lt;fields&gt;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-keepclasseswithmembernames class * {</span></span>
<span class="line"><span>    @butterknife.* &lt;methods&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="新しく追加された機能" tabindex="-1">新しく追加された機能 <a class="header-anchor" href="#新しく追加された機能" aria-label="Permalink to &quot;新しく追加された機能&quot;">​</a></h2><h3 id="resource-binding" tabindex="-1">Resource Binding <a class="header-anchor" href="#resource-binding" aria-label="Permalink to &quot;Resource Binding&quot;">​</a></h3><p>stringやbool, color等のxmlに定義されたリソースを変数にバインド出来るようになりました。<br> 下記のアノテーションを使います。</p><ul><li><code>@BindBool</code>: <code>R.bool</code>を<code>boolean</code>にバインド</li><li><code>@BindColor</code>: <code>R.color</code>を<code>int/ClorStateList</code>にバインド</li><li><code>@BindDimen</code>: <code>R.dimen</code>を<code>int</code>(ピクセルサイズ)あるいは<code>float</code>(正確な数値)にバインド</li><li><code>@BindDrawable</code>: <code>R.drawable</code>を<code>Drawable</code>にバインド</li><li><code>@BindInt</code>: <code>R.int</code>を<code>int</code>にバインド</li><li><code>@BindString</code>: <code>R.string</code>を<code>String</code>にバインド</li></ul><p>こちらからは以上です。</p><p>参考: <a href="https://github.com/JakeWharton/butterknife/blob/master/CHANGELOG.md" target="_blank" rel="noreferrer">butterknife/CHANGELOG.md at master · JakeWharton/butterknife</a></p>`,18)])])}const b=t(i,[["render",r]]);export{u as __pageData,b as default};
