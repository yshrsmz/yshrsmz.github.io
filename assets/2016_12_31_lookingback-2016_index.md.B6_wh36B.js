import{_ as t,a as r,o as a,X as o}from"./chunks/framework.Cp7KI1mb.js";const d=JSON.parse('{"title":"2016年を振り返って","description":"","frontmatter":{"layout":"post","title":"2016年を振り返って","category":"diary","tags":["diary"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2016/12/31/lookingback-2016/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2016/12/31/lookingback-2016/"}],["meta",{"property":"og:title","content":"2016年を振り返って"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2016/12/31/lookingback-2016/ogp.png"}]]},"headers":[],"relativePath":"2016/12/31/lookingback-2016/index.md","filePath":"posts/2016/2016-12-31-lookingback-2016.md","date":{"time":"2016-12-31","string":"December 31, 2016","year":"2016","month":"12","day":"31"}}'),n={name:"2016/12/31/lookingback-2016/index.md"};function i(l,e,p,s,c,m){return a(),r("div",null,[...e[0]||(e[0]=[o('<p>2016年もあと一時間半くらいですし、振り返りなどやります。</p><h2 id="仕事" tabindex="-1">仕事 <a class="header-anchor" href="#仕事" aria-label="Permalink to &quot;仕事&quot;">​</a></h2><p>今年は主に改善業務をやっていました。</p><p>大体下記のような感じです</p><ul><li>CIでAndroidLint/ChecyStyleかける</li><li>モデルクラスの大改修 <ul><li>APIリクエスト周りの処理をモデルクラスから切り出す</li><li>Realm周りの処理をモデルクラスから切り出す</li><li>モデルクラスが互いに依存しあわないようにユースケース層を作る</li><li>テスト、テスト、そしてテスト</li></ul></li></ul><p>モデルクラスがAPIリクエストをすればDBアクセスもして、モデルクラスが別のモデルクラスをメンバー変数に持ってたり…と結構マッチョな感じになっていました。</p><p>そこで、単一責務を意識してAPIリクエストをするクラスやDBアクセスするクラスを作り、モデルクラスはそれらを相互に橋渡しするだけのクラスにしました。最近流行りのレイヤード・アーキテクチャってやつです。</p><p>また、モデルクラスが互いに依存せず、それぞれの役割に徹するためにユースケースクラスを用意しました。モデルクラス間で行ったり来たりするような処理はここに書いていく感じです。<br> ここも(ユースケースクラスと言うくらいですから)単一責務を意識して、一つのユースケースクラスが複数の仕事をしないように心がけてます。</p><p>あとはリファクタリングしたところはしっかりテストを書いてました。弊社アプリのテストは儂が育てた、といってもあながち間違いではないですねｗ<br> Realm周りは無理やりバックグラウンドスレッドでRxできるようにしているんですが、まあ無理やりなだけあって限界が来ています。今後Realmの公式Rxサポートに書き換えるにあたってこのテスト達が役に立つはず…</p><p>来年もしばらくはモデルクラスのリファクタリングをしてるんでしょうが、View周りも課題が山積みなので早いうちに手をつけたいです。</p><h2 id="個人" tabindex="-1">個人 <a class="header-anchor" href="#個人" aria-label="Permalink to &quot;個人&quot;">​</a></h2><ul><li>#write_code_everyday</li><li><a href="https://github.com/yshrsmz/LicenseAdapter" target="_blank" rel="noreferrer">LicenseAdapter</a></li><li><a href="https://github.com/yshrsmz/simple-preferences" target="_blank" rel="noreferrer">Simple Preferences</a></li><li><a href="https://github.com/yshrsmz/monotweety" target="_blank" rel="noreferrer">Monotweety</a></li></ul><p><img src="https://lh3.googleusercontent.com/DO2c9UX2XZLMHhILX62xj5yomvoHI__Dy2Yge5nXKXZlXpK9vn9H6HjkaBzxuMFielsbQWynfelecMgT7fO0CyulLae9cu2uH9eYPnbjTUEd-RUcQ60qb0e-wyRJQibXxUVoIk8L13bYV-GJmGumR7hDf5xedWuTZkygswC8n_IFiTTBnpe6m1aTP1AQnRqDMWj2pvdlT6OCZppUagD01tUMXJLv4IYBylKySJmbt-qKG5_Xnt8C7HbAdy-KQmX87iUg4pEQR2NVSYFJiQ6znfHLS3MhEI3ceK4-rY3tD5U8oB_LEoT3QpNcvxQaggPSxJfdYtFH3cTKOOThlTQXfQak00n5itThK0fhB3DinnR0K_SPb7PgaKeQWJsBdnbPZvGjfIz46FzhqMNjhFJKy59xnGfFiJKsyVetT7Vtjk5fVdIO8iaWq95HeYhq0VH1paV29ur8WWzY-3Iw2mvDfqIGZWQTby-e3EyrIieBQW5mZ8d0jUDPbfZa7_zF9h-zY3DwJLyO0dj1XP8wjiZnDF-OWTNlPbR-uwx31yIBXBgQO13fiEd7RQTjqaNxG899N9JeqHnWr5JvJ0KMHl69lppWeCGImb2vUjEJpPoqGq4JKojZZS8S=w500" alt="contribution"></p><p>今年の実績はこんな感じです。</p><p>contributions: 3650<br> longest streak: 371</p><p>去年の9月あたりから意識して毎日コード書くようにしてました。上記のグラフ自体は仕事のコードも含めたものですが、毎日なにかしら自分のコードも書くようにしてます。</p><p>たとえ一日一時間だったとしても、毎日続けていれば結構な量になります。365日続けてれば365時間ですし、まあそんだけやってれば何かしら成果物できます。</p><p>そんなわけで今年はライブラリ2個とアプリ１個が成果物です。</p><p><a href="https://github.com/yshrsmz/LicenseAdapter" target="_blank" rel="noreferrer">LicenseAdapter</a>はOSSライセンスを表示するRecyclerView用のAdapterです。<br> 今のところライセンス管理は自分でやらなきゃなのでGradle plugin書いてライセンス一覧のjsonファイル出力したいなー、とかそんな感じ。</p><p><a href="https://github.com/yshrsmz/simple-preferences" target="_blank" rel="noreferrer">Simple Preferences</a>はSharedPreferences周りのコードを自動生成してくれるライブラリです。Annotation Processorの秀作として作りました。&quot;Simple~&quot;なんてエンジニアにあるまじき名前をつけてしまったのはちょっと今でも後悔してるんですが、まあわりとシンプルにまとまってると思います。<br> Annotation Processor結構面白いので来年も何かしら作りたい。</p><p><a href="https://github.com/yshrsmz/monotweety" target="_blank" rel="noreferrer">Monotweety</a>は通知エリアからツイートするだけのシンプルなTwitterクライアントです。去年の<a href="/2015/11/10/omnitweety-andrid-released-share-url-twitter/">Omnitweety</a>に続き、Twitterをちょっと便利にするアプリシリーズ。<br> Kotlin使ってみたり、ConductorでViewベースFragmentレスで書いてみたりいろいろ実験しながら書いてました。Kotlinはめちゃくちゃ書きやすかったので来年はKotlinで書く仕事したいですね。<br> Monotweetyのブログエントリは<a href="/2016/11/14/monotweety-android-released/">こちら</a></p><hr><p>とりあえず今年はこんな感じでした。</p><p>来年もいろいろアウトプットがんばります。</p><p>良いお年を。</p>',25)])])}const g=t(n,[["render",i]]);export{d as __pageData,g as default};
