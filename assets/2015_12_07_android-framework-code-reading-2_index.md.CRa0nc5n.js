import{_ as a,a as r,o,X as d}from"./chunks/framework.Cp7KI1mb.js";const m=JSON.parse('{"title":"「まったりAndroid Framework Code Reading #2」に参加してきた","description":"","frontmatter":{"layout":"post","title":"「まったりAndroid Framework Code Reading #2」に参加してきた","category":"programming","tags":["Android"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2015/12/07/android-framework-code-reading-2/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2015/12/07/android-framework-code-reading-2/"}],["meta",{"property":"og:title","content":"「まったりAndroid Framework Code Reading #2」に参加してきた"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2015/12/07/android-framework-code-reading-2/ogp.png"}]]},"headers":[],"relativePath":"2015/12/07/android-framework-code-reading-2/index.md","filePath":"posts/2015/2015-12-07-android-framework-code-reading-2.md","date":{"time":"2015-12-07","string":"December 7, 2015","year":"2015","month":"12","day":"07"}}'),t={name:"2015/12/07/android-framework-code-reading-2/index.md"};function n(i,e,c,p,s,l){return o(),r("div",null,[...e[0]||(e[0]=[d('<p>「まったりAndroid Framework Code Reading #2」に参加してきた</p><p>ちょっと前の話ですが、<a href="https://mandroidfcr.doorkeeper.jp/events/33925" target="_blank" rel="noreferrer">まったりAndroid Framework Code Reading #2</a>というもくもくコード読む会に行ってきました。<br> 個々人でテーマ決めて、最後に成果を報告しあう感じ。</p><h2 id="テーマ" tabindex="-1">テーマ <a class="header-anchor" href="#テーマ" aria-label="Permalink to &quot;テーマ&quot;">​</a></h2><p>私は、 <code>WindowManager</code> を読んでみることにした。<a href="https://play.google.com/store/apps/details?id=net.yslibrary.omnitweety" target="_blank" rel="noreferrer">最近公開したアプリ</a>が他のアプリにの上にオーバーレイするタイプのモノで、 <code>WindowManager</code> をちょっと触ったからだ。</p><h2 id="成果" tabindex="-1">成果 <a class="header-anchor" href="#成果" aria-label="Permalink to &quot;成果&quot;">​</a></h2><p><code>WindowManager</code> のコード自体はすぐに見つかった。</p><p><a href="http://tools.oesf.biz/android-6.0.0_r1.0/xref/frameworks/base/core/java/android/view/WindowManager.java" target="_blank" rel="noreferrer"><code>android.view.WindowManager.java</code></a>がインターフェイスで、実態は <a href="http://tools.oesf.biz/android-6.0.0_r1.0/xref/frameworks/base/core/java/android/view/WindowManagerImpl.java" target="_blank" rel="noreferrer"><code>android.view.WindowManagerImpl.java</code></a> こっちのようだ。</p><p>ただ、基本的に処理は全て <a href="http://tools.oesf.biz/android-6.0.0_r1.0/xref/frameworks/base/core/java/android/view/WindowManagerGlobal.java" target="_blank" rel="noreferrer"><code>android.view.WindowManagerGlobal.java</code></a> に委譲しているらしく、大した処理は書いてなかった。</p><p>ここでちょっと興味がずれて、 <code>getApplicationContext().getSystemService(Context.WINDOW_SERVICE)</code> を呼ぶとどんな感じで <code>WindowManager</code> が渡されるのか調べ始めた。</p><p><a href="http://tools.oesf.biz/android-6.0.0_r1.0/xref/frameworks/base/core/java/android/content/Context.java" target="_blank" rel="noreferrer"><code>context.getSystemService(Context.WINDOW_SERVICE)</code></a> を呼ぶと、<a href="http://tools.oesf.biz/android-6.0.0_r1.0/xref/frameworks/base/core/java/android/app/SystemServiceRegistry.java" target="_blank" rel="noreferrer"><code>android.app.SystemServiceRegistry.java</code></a> から <code>WindowManagerImpl.java</code> が返される。どこからSystemServiceRegistryを呼んでるかはちょっと追えていない。</p><p><code>WindowManager</code> は <code>ViewManager</code> を継承している。<br> で、<code>ViewManager</code> には <code>ViewManager#addView</code> は <code>BadTokenException</code> や <code>InvalidDisplayException</code> を投げる、って書いてあるけどそれらのExceptionは <code>WindowManager</code> に定義してある。<br> 親interfaceのViewManagerに定義するか独立したクラスとして定義したほうがいいんじゃ？　って気もしたけどどうなんでしょうね。</p><h2 id="感想" tabindex="-1">感想 <a class="header-anchor" href="#感想" aria-label="Permalink to &quot;感想&quot;">​</a></h2><p>Frameworkのコードを読む機会ってあまりないので、（時間は圧倒的に足りないにしても）とても良い機会だった。今回はあまり役立ちそうな知見は得られなかったけど、OS標準アプリのコードとかRecyclerViewとか、いろいろ読んでみたいコードができた。<br> 次回以降もタイミングがあったら参加したい、と思える会でした。</p><p>こちらからは以上です。</p>',14)])])}const w=a(t,[["render",n]]);export{m as __pageData,w as default};
