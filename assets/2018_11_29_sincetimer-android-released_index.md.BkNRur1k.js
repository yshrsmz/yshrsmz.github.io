import{_ as r}from"./chunks/feature.dA8VU-7p.js";import{_ as t,a,o,X as i}from"./chunks/framework.Cp7KI1mb.js";const b=JSON.parse('{"title":"最後にあれしたのいつだっけ？をトラッキングするAndroidアプリ、SinceTimerをリリースしてた","description":"","frontmatter":{"layout":"post","title":"最後にあれしたのいつだっけ？をトラッキングするAndroidアプリ、SinceTimerをリリースしてた","category":"programming","tags":["Android","sincetimer"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2018/11/29/sincetimer-android-released/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2018/11/29/sincetimer-android-released/"}],["meta",{"property":"og:title","content":"最後にあれしたのいつだっけ？をトラッキングするAndroidアプリ、SinceTimerをリリースしてた"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2018/11/29/sincetimer-android-released/ogp.png"}]]},"headers":[],"relativePath":"2018/11/29/sincetimer-android-released/index.md","filePath":"posts/2018/2018-11-29-sincetimer-android-released.md","date":{"time":"2018-11-29","string":"November 29, 2018","year":"2018","month":"11","day":"29"}}'),n={name:"2018/11/29/sincetimer-android-released/index.md"};function s(l,e,c,p,m,d){return o(),a("div",null,[...e[0]||(e[0]=[i('<p><img src="'+r+'" alt="feature"></p><p>掲題のとおり、今年の7月末にアプリを<a href="https://play.google.com/store/apps/details?id=com.codingfeline.sincetimer" target="_blank" rel="noreferrer">Google Play Storeに公開していました</a>。気がついたら4ヶ月も下書きのまま放置してしまっていた…</p><p>名前は&quot;SinceTimer(シンスタイマー)&quot;です。</p><p>「最後に映画観たのいつだっけ？」とか「最後にラーメン食べたのいつだっけ？」とかいった情報を管理するためのアプリです。</p><hr><h2 id="画面" tabindex="-1">画面 <a class="header-anchor" href="#画面" aria-label="Permalink to &quot;画面&quot;">​</a></h2><p>トップ画面はこんな感じで</p><p><img src="https://lh3.googleusercontent.com/wa4DdOgjUmwgAwEfdYNZnGE2xN0GOXOMnRboZz96emTmIK0QAqsk_dsmGdnLZA4RJJlmWHCTRAUzuvrZfil34sUlDY6FiuJNmWi_7KsVHxLA6Na4xSYauLXr72bUKxMfSavvko6oyVeYmDbWQ4MsDw5tp1dNtc5TCZ1vU9h9QYzjgOq5S0FDGfwTk1HrpC7NLiP-HEm0ms-MoLKfPSDSwg0mx_3uzoVunx1-hrhRRIPZB9W4y45vIa7lqiKrsmgX5K_dd0rrc0RV62EhLfJW_CBAkepfPkpYukuIMOEqN2jh-HvgDtHI_twRNHZeqgNT4jshCAUk78jaImmR_jBM-4xUE7OmLDp3E33fUu9Z3eSohs4PUIgRA0MAdxjQMwnYmNGEdThtZjZIKdcico8IrGxWYUsmRgCvqr0YRYrEbY5BwaOaXrU2Ql_i-8iPPAsmuGb4UmZ95SsY9-8wvr9JKXq0VXU5qq83SL18Px6qc4VcIZ414E_TYUWp-zlEsoa_4YpmGRXPsRSXhIKVYn-qyVg63vGTIsfgOOeVnpub8nSfBEVcEvo89BaNamaJbU2LGso5perIxni2FaPaiqq-8hNPh9pZYKcPDt9TssC9p7bCzBlW1fcyow2mfBwiFQ0=w448-h796-no" alt="トップ"></p><p>イベントの追加画面はこう</p><p><img src="https://lh3.googleusercontent.com/7H975szAV8PRzGwpWFw9qb0zZ5X4T6KUOIbWrkGYaa1_ztSnLuQrvJF9kLYJ83s1cUmJW1UciAydsXZ0lbWCU4L9FsEgyVpy_UyaXvjCowgBwF8KLhWH4hhnNH_GcfK7AGBtYGb2PDTqQPFOZuPm0QVnxPOH5c2TTeB26pOikHQJhSNbjV_1mQhEzj6Opb0ygEGeWRewW-0ILxKmwHRYLV2FU3fMRPE_L2nlUiC4VPi0ksmFRWLsgct36FV_e7-glg-6VJtOHyshT_HxfkQTZ4xolGzYnMELcsK0EP2OsibRry0vg3A1LFCo_p1EVb6M8fnPAqUI6PbQDp0I3mI0AdkBEjabEb8qtLRs-uCaiohkgcS7fPAj47YCNVICw28x5uR0qDCY7kbTPWD2EDsLD7rbnIphOD8fziTAk3j7HePkkrNwH2p0n0DlW_LV8jfGpHFPdrlP3keLg6_2CL-D9oxexUJ7NK6LD-2aZt1vZXWoraoq3_76GN4IPFE57cVMxKfI46ixYU4j5D3ZIUHB5LwN07-ZaJpo0n2cqBW2oSeWNt8QUJi8aPZy_qjq7LVkIz5z3oxlsj0i7pwmvkXgv2tCYSAICFLSWkdUMrqswMaAdT8dn2p9Zi06VlCZ93w=w448-h796-no" alt="追加"></p><p>各イベントの詳細では履歴が一覧できます。FABから新しい履歴を追加</p><p><img src="https://lh3.googleusercontent.com/uhU8mu23MCPu8rI55hq93D1qiWjwg2YH-vUCYGQzeOesgXz2qLY8jqxY881J7CTioTSDtZkBuV44p3dVK2d1DdhaoR7iRSHhAUT5yfCwXXMhX3g7aAJUzDW12D78BW0YGhQzzmNREC-FrgEZHd7s2Muec5Xif-bo2B3c_j3YxggzbV_sre6eZmKTz4hxVOGcCIM8jcmM6mNVEEUVZRem_XbCN1z_-U0oGjTkMGjTApMPFcyH1ZDVpB1KTux8KV1XDYXgp6S3cCbsnLuzFOxOR4djQUcdr-kcnYAVZ1qWrZDran4mHbmRBJo4FhQKA-IpzA8vlhVsCp_EDtNdINKk6AVHzx31kJUOPsVTym49WuHOiHjvkMbcRzsclVmheMxATgocYAhme0VcTbizxrpjK2lIWtbX094cA2bSK2X4YwrLpA2C2pdEcmQT0mP_8CMMqeR3_zldkHZkt8Ho1-vA3o9drPvVbHatNFTKoa1KmFszYPfcKZkGhP0Qx3tvJKmQymbQ3SkyKbduf0V1AKzfkgRT6YajdraqDJAOTXUDgGaUAsNGmrquqrZ68wX3hGe0IfWUll3Zc18XsI6ytO905yEY_ZPQPf0E_04bMrOjxm36MgJwmCLoDjMYETYSt-Q=w448-h796-no" alt="詳細"></p><p>今回はGoogle I/O 2018で発表された新しいMaterial Designを意識して作っています。</p><h2 id="アイコン" tabindex="-1">アイコン <a class="header-anchor" href="#アイコン" aria-label="Permalink to &quot;アイコン&quot;">​</a></h2><p>\b今までは<a href="https://99designs.jp/" target="_blank" rel="noreferrer">99designs</a>で依頼してたのですが、今回はSketchで自作してみました。<br> 素人にしてはソレっぽいのができてかなり気に入っています。<br> \bMaterial Designは\bガイドラインがしっかりしているので、やっぱいいですね。</p><h2 id="今後の展望" tabindex="-1">今後の展望 <a class="header-anchor" href="#今後の展望" aria-label="Permalink to &quot;今後の展望&quot;">​</a></h2><p>もうちょっとほしい機能があるので、引き続き開発は続けていく\bつもりです。</p><ul><li>ダークテーマ</li><li>タイマー</li><li>課金で広告\b非表示</li><li>検索</li></ul><h1 id="※ここから下は技術者向け" tabindex="-1">※ここから下は技術者向け ---------- <a class="header-anchor" href="#※ここから下は技術者向け" aria-label="Permalink to &quot;※ここから下は技術者向け ----------&quot;">​</a></h1><h2 id="使った技術とか" tabindex="-1">使った技術とか <a class="header-anchor" href="#使った技術とか" aria-label="Permalink to &quot;使った技術とか&quot;">​</a></h2><p>Android Architecture Components(以後AAC)を\bガッツリ使ってます。<br> 最近は公式のライブラリが充実してきたので、迷うことが減っていいですね。初心者的には学ぶことが増えて一長一短でしょうけど…。</p><p>最初はSingle Activity\bな構成にしようかと思ったんですが、「Toolbarの形が\b大きく異なる場合に\bどうするの？」という問題をうまく解決できそうになかったので、Activityは各画面で別になっています。<br> この問題、<a href="https://github.com/googlesamples/android-sunflower" target="_blank" rel="noreferrer">googlesamples/android-sunflower</a>でも<a href="https://github.com/googlesamples/android-sunflower/issues/75" target="_blank" rel="noreferrer">issueがあがっていて</a>、\bまだ公式でも意見がまとまっていないようです。うまいこと解決できるといいのですが。</p><p>データベースはAACのRoomを使っています。RxJavaやLiveDataによるリアクティブな使い方をサポートしていて、ホントに使いやすいです。<br> なにより、自分で書いたSQL\bの結果をクラスに楽にマッピング\bでき\b最高です。もう\bテーブル構成まんまなデータをプレゼンテーション層で使う時代は終わったのです。<br> 2.1.0からはFTSやViewもサポートするようなので、今後 <code>LIKE</code> を使わない検索の実装に\bも役立ちそうです。自力でN-gram的なことをしなきゃなんで、また別の困難はありそうですが。</p><h3 id="architecture" tabindex="-1">Architecture? <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture?&quot;">​</a></h3><p>Clean Architecture x MVIな感じです。<br> AACのViewModelがUsecaseとReducerを持ち、画面の\bState\b(Kotlinのdata class)をLiveDataでFragmentに公開しています。</p><p>AndroidだとWebの仮想DOM的な差分更新の仕組みがないので、新しいStateとViewの状態を比べて更新の可否を決めるようなコードを書くことになり、若干手間は\bかかります。</p><p>Stateの更新場所がまとまるのは大変良いので、<a href="https://github.com/airbnb/MvRx" target="_blank" rel="noreferrer">AirbnbのMvRx</a>とかいろいろ先達を参考にしつつよい方法を模索していきたいです。</p><p>参考</p><ul><li>PlayStoreリンク: <a href="https://play.google.com/store/apps/details?id=com.codingfeline.sincetimer" target="_blank" rel="noreferrer">https://play.google.com/store/apps/details?id=com.codingfeline.sincetimer</a></li></ul>',29)])])}const u=t(n,[["render",s]]);export{b as __pageData,u as default};
