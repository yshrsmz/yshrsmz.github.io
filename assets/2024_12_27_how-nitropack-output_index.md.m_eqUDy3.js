import{_ as i,a,o as t,X as n}from"./chunks/framework.Cp7KI1mb.js";const c=JSON.parse('{"title":"Nitro がどこで成果物内の node_modules を生成するか","description":"","frontmatter":{"layout":"post","title":"Nitro がどこで成果物内の node_modules を生成するか","tags":["TIL","Node.js","Nitro","Rollup"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2024/12/27/how-nitropack-output/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2024/12/27/how-nitropack-output/"}],["meta",{"property":"og:title","content":"Nitro がどこで成果物内の node_modules を生成するか"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2024/12/27/how-nitropack-output/ogp.png"}]]},"headers":[],"relativePath":"2024/12/27/how-nitropack-output/index.md","filePath":"posts/2024/2024-12-27-how-nitropack-output.md","date":{"time":"2024-12-27","string":"December 27, 2024","year":"2024","month":"12","day":"27"}}'),e={name:"2024/12/27/how-nitropack-output/index.md"};function l(p,s,r,h,o,k){return t(),a("div",null,[...s[0]||(s[0]=[n(`<p><code>Nitro</code> ってどうやって <code>node_modules</code> 内の必要なものだけを <code>.output</code> に持ってきてるんだろう</p><p><strong>目次</strong></p><nav class="table-of-contents"><ul><li><a href="#prepare">prepare</a></li><li><a href="#copypublicassets">copyPublicAssets</a></li><li><a href="#prerender">prerender</a></li><li><a href="#build">build</a></li><li><a href="#buildproduction">buildProduction</a></li><li><a href="#getrollupconfig">getRollupConfig</a></li><li><a href="#externals">externals</a></li></ul></nav><p><code>nitro</code> コマンドの build の実装を見ると下記のようになっている</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ args }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rootDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((args.dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args._dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nitro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createNitro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rootDir,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dev: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        minify: args.minify,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        preset: args.preset,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compatibilityDate: args.compatibilityDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nitro);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> copyPublicAssets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nitro);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prerender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nitro);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nitro);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nitro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/cli/commands/build.ts#L37-L53" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/cli/commands/build.ts#L37-L53</a></p><p>つまり <code>prepare</code>, <code>copyPublicAssets</code>, <code>preprender</code>, <code>build</code> のいずれかのメソッドが目的の実装であろう</p><h3 id="prepare" tabindex="-1">prepare <a class="header-anchor" href="#prepare" aria-label="Permalink to &quot;prepare&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/prepare.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/prepare.ts</a></p><p>ここでは出力先ディレクトリの削除と再作成を行っている</p><h3 id="copypublicassets" tabindex="-1">copyPublicAssets <a class="header-anchor" href="#copypublicassets" aria-label="Permalink to &quot;copyPublicAssets&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/assets.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/assets.ts</a></p><p><code>noPublicDir</code> オプションが有効なら処理をスキップ。</p><p>nitro.config.ts で設定した <code>publicAssets</code> ディレクトリから、必要な asset を出力先ディレクトリにコピー。</p><p>で、必要に応じて(<code>compressPublicAssets</code> が true なら)圧縮も行う。</p><h3 id="prerender" tabindex="-1">prerender <a class="header-anchor" href="#prerender" aria-label="Permalink to &quot;prerender&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/prerender/prerender.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/prerender/prerender.ts</a></p><p><code>noPublicDir</code> オプションが有効なら処理をスキップ。</p><p><a href="https://nitro.build/config#prerender" target="_blank" rel="noreferrer">prerender</a> が有効な route をビルド時に描画する。静的に生成するってこと。</p><h3 id="build" tabindex="-1">build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;build&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/build.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/build.ts</a></p><p>本番向けビルドでは、 <code>buildProduction()</code> に処理を移譲している。</p><h3 id="buildproduction" tabindex="-1">buildProduction <a class="header-anchor" href="#buildproduction" aria-label="Permalink to &quot;buildProduction&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/prod.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/core/build/prod.ts</a></p><p>色々やってるけど、</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nitro.options.static) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nitro.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \`Building \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nitroServerName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nitro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} (preset: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\`</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nitro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\`</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, compatibility date: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\`</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatCompatibilityDate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nitro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compatibilityDate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\`</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rollupConfig).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nitro.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatRollupError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rollupConfig.output);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>静的でないときのみに実行するここが怪しい。<br> rollup でビルドしてるので、 <code>rollupConfig</code> がどうなってるか見るとよさそう。<code>rollupConfig</code> は前述の <code>build.ts</code> で取得している。</p><h3 id="getrollupconfig" tabindex="-1">getRollupConfig <a class="header-anchor" href="#getrollupconfig" aria-label="Permalink to &quot;getRollupConfig&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/rollup/config.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/rollup/config.ts</a></p><p>色々 rollup plugin の設定を書いている。</p><p>が、package.json の dependencies にある rollup plugin など見ると、そのへんの処理をしているものはなさそう。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    &quot;@rollup/plugin-alias&quot;: &quot;^5.1.1&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/plugin-commonjs&quot;: &quot;^28.0.2&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/plugin-inject&quot;: &quot;^5.0.5&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/plugin-json&quot;: &quot;^6.1.0&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/plugin-node-resolve&quot;: &quot;^15.3.1&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/plugin-replace&quot;: &quot;^6.0.2&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/plugin-terser&quot;: &quot;^0.4.4&quot;,</span></span>
<span class="line"><span>    &quot;@rollup/pluginutils&quot;: &quot;^5.1.4&quot;,</span></span></code></pre></div><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/package.json#L102-L109" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/package.json#L102-L109</a></p><p>ということで nitro 内製の rollup plugin がそれっぽい。</p><p>…というふうに読み進めて行ってたら、別口で答えを見つけた</p><p><a href="https://github.com/unjs/unbuild/issues/276#issuecomment-1640557493" target="_blank" rel="noreferrer">Bundle <code>dist/node_modules</code> · Issue #276 · unjs/unbuild</a></p><blockquote><p>As an alternative idea, we might extract nitro externals plugin to generate dist/node_modules but it seems a super tricky thing at the moment so i don&#39;t think we can plan it early. But i will certainly keep your issue in mind 👍🏼</p></blockquote><p>ということでやっぱり nitro 内製の externals plugin が対象の処理でよさそう。</p><h3 id="externals" tabindex="-1">externals <a class="header-anchor" href="#externals" aria-label="Permalink to &quot;externals&quot;">​</a></h3><p><a href="https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/rollup/plugins/externals.ts" target="_blank" rel="noreferrer">https://github.com/nitrojs/nitro/blob/1767019c04a44238fe14e6cce8dacd50595a5092/src/rollup/plugins/externals.ts</a></p><p>ここで externals 扱いするか、 inline でバンドルするか決めているらしい。</p><p>しかしログを仕込んで動かしてみても、モノレポ内の別パッケージはこの externals plugin まで来ない模様。</p><p>ここよりも前の段階で処理されてそうな気がするけど、その変理解するにはまず rollup plugin の仕組みをちゃんと知る必要がありそう…</p><p>ということで今回はここまで。</p>`,44)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
