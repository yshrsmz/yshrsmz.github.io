import{_ as r,a as n,o as i,b as e,X as s,f as t}from"./chunks/framework.Cp7KI1mb.js";const b=JSON.parse('{"title":"(Android) 夏休みだったので画像を検索してひたすらファボるAndroid用Twitterアプリつくった","description":"","frontmatter":{"layout":"post","title":"(Android) 夏休みだったので画像を検索してひたすらファボるAndroid用Twitterアプリつくった","category":"programming","tags":["Android"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2015/09/12/app-created-during-summer-vacation/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2015/09/12/app-created-during-summer-vacation/"}],["meta",{"property":"og:title","content":"(Android) 夏休みだったので画像を検索してひたすらファボるAndroid用Twitterアプリつくった"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2015/09/12/app-created-during-summer-vacation/ogp.png"}]]},"headers":[],"relativePath":"2015/09/12/app-created-during-summer-vacation/index.md","filePath":"posts/2015/2015-09-12-app-created-during-summer-vacation.md","date":{"time":"2015-09-12","string":"September 12, 2015","year":"2015","month":"09","day":"12"}}'),p={name:"2015/09/12/app-created-during-summer-vacation/index.md"};function o(l,a,c,d,m,h){return i(),n("div",null,[...a[0]||(a[0]=[e("p",null,"掲題のとおり、Androidアプリを作った。 最初はまったく別の事情のために作り始めたのだけれども、途中でその用事がなかったことになったのでそのまま「夏休みの課題」として仕上げることにした。",-1),e("p",null,[t("名前は「画像検索してファボるやつ」"),e("br"),t(" まずはデモ動画をどうぞ。")],-1),e("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/vAbFlXz8vQQ",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),s(`<p>見ての通り、設定したキーワードでTwitter検索して、結果をタブ形式で表示するだけのアプリです。アプリからできるアクションはお気に入りだけ。</p><p>アプリを作るにあたって設定した要件は下記の通り</p><ul><li>画像投稿サービスのAPIを使ったアプリであること</li><li>二日間くらいで仕上げること</li></ul><p>というわけで、</p><ul><li>TwitterのAPIを利用して画像を検索、</li><li>検索結果をタブで表示し、スワイプで移動でき</li><li>ひたすらファボれる</li></ul><p>アプリを作ることにした。</p><p>最初はInstagramで作ろうとしたんだけど（ <code>#ilovecat</code> をひたすら見るだけのアプリを作りたかった）、ちょっとAPIドキュメントを見た限りだとLikeのAPIが一般には公開されていないようだった。 そこで、同じように画像が投稿されていてハッシュタグが使用されているTwitterのAPIを利用することにした。</p><p>そしてできあがったのがこの、「画像検索してファボるやつ」だ。<br> レポジトリは<a href="https://github.com/yshrsmz/photosearcher" target="_blank" rel="noreferrer">こちら</a>。</p><h2 id="技術的な" tabindex="-1">技術的な <a class="header-anchor" href="#技術的な" aria-label="Permalink to &quot;技術的な&quot;">​</a></h2><p>使った技術はだいたい下記の通り。</p><ul><li>dagger2</li><li>Fabric Twitter Kit</li><li>RxAndroid</li><li>Realm</li></ul><h3 id="dagger-2" tabindex="-1">Dagger 2 <a class="header-anchor" href="#dagger-2" aria-label="Permalink to &quot;Dagger 2&quot;">​</a></h3><p>言わずと知れたDIライブラリ。<br> モデルクラスの注入とかいろいろ。 Singletonの管理もさくっとできるので、今回は特に各タブ表示用の <code>List&lt;Tweet&gt;</code> の管理クラスを運用するのにとても役立った。<br> Fragmentが状態をあまり持たなくなったので、結果的に画面のローテーションにも対応できたようだ。</p><h3 id="fabric-twitter-kit" tabindex="-1">Fabric Twitter Kit <a class="header-anchor" href="#fabric-twitter-kit" aria-label="Permalink to &quot;Fabric Twitter Kit&quot;">​</a></h3><p>Twitter周りの処理はまじめにやっていたら２日では仕上がらない気がしていたので、完全にFabricに頼ってしまうことにした。</p><p>Fabricはホントにすごくて、認証はボタンをひとつ置くだけだし、基本的なAPIアクセスも数行のコードだけで実現できてしまう。</p><p>自分でAPI周りの処理を書きたい時のためにリクエストヘッダに付加する情報も簡単にアクセスできるよう準備してあるし、もう至れり尽くせりである。</p><p>小洒落たことをしようと思わなければ、「自分のアプリ内で関連ツイートを表示」みたいな要件はさくっと満たせてしまう。 軽くTwitterアプリ作ってみたいなー、という諸兄はぜひ一度Fabricを使ってみてはいかがだろうか。</p><p>ただ、実はFabricのTwitterSDKはRecyclerViewに対応していなかったりRxJavaをサポートしてなかったりしたので、ListView用のクラスを参考にしつつRecyclerView用のクラスを書いたり、Timelineクラスをリアクティブに扱うためのクラスを自作したりすることになった。</p><p>このへん、おそらくサードパーティの開発者が使うことを想定してないであろうクラスを直でつかったりしてるのでSDKの仕様変更があったら大変なことになりそう。</p><h3 id="rxandroid" tabindex="-1">RxAndroid <a class="header-anchor" href="#rxandroid" aria-label="Permalink to &quot;RxAndroid&quot;">​</a></h3><p>Fabric Twitter SDKはそのままだと普通のコールバック形式のAPIなので、RxJavaでリアクティブに扱えるように<a href="https://github.com/yshrsmz/photosearcher/blob/master/app/src/main/java/net/yslibrary/photosearcher/model/rx/TimelineObservable.java" target="_blank" rel="noreferrer">ラッパークラス</a>を用意してみた。<br> 最初は <code>Observable&lt;List&lt;Tweet&gt;&gt;</code> にしていたんだけど、 最終的に取得した <code>Tweet</code> オブジェクトをTimelineのラッパークラスでまとめて管理するようにし、かつ <code>Adapter</code> クラスでもそのTimelineのラッパークラスを直接見るようにしたので、 <code>Observable</code> では新しい<code>Tweet</code> オブジェクトを「どの位置にいくつ追加したか」を通知するだけにした(通知先では <code>Adapter#notifyItemRangeInserted</code> を呼ぶだけ)。</p><p>あとは、SDKの提供するお気に入り追加APIがRetrofit使ってるにも関わらずコールバック形式だったので <code>Observable</code> を戻り値にするAPIを用意してみたり。こういう拡張の余地を残しといてくれるの、とても使いやすくてよい。</p><h3 id="realm" tabindex="-1">Realm <a class="header-anchor" href="#realm" aria-label="Permalink to &quot;Realm&quot;">​</a></h3><p>Search API経由だと、自分がそのTweetをお気に入り済みかどうかわからない、というAPIの制約があるので、このアプリからふぁぼったかどうか、を保存している。</p><p>あとは、入力したキーワードの保存。</p><h2 id="アーキテクチャについて" tabindex="-1">アーキテクチャについて <a class="header-anchor" href="#アーキテクチャについて" aria-label="Permalink to &quot;アーキテクチャについて&quot;">​</a></h2><p>最初は <code>Mortar/Flow</code> 使ってMVPだ！　とも思っていたんだけど、「２日くらいでつくれるやつ」という制約があったので何度か作ったことのあるActivity/Fragmentを使ったベーシックな構成にしている。<br> 機会があったらMVPで作りなおしてみよう。</p><p>パッケージ構成は以下のとおり</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net.yslibrary.photosearcher</span></span>
<span class="line"><span>    ├── event               // Ottoのイベントクラス</span></span>
<span class="line"><span>    ├── graph               // DaggerのComponentとかModuleとかアノテーションとか</span></span>
<span class="line"><span>    │   ├── component</span></span>
<span class="line"><span>    │   ├── module</span></span>
<span class="line"><span>    │   └── qualifier</span></span>
<span class="line"><span>    ├── model               // モデルクラス類</span></span>
<span class="line"><span>    │   ├── api             // RetrofitのAPI interfaceとか</span></span>
<span class="line"><span>    │   ├── dto             // アプリで使う永続しないPOJO</span></span>
<span class="line"><span>    │   ├── entity          // RealmObjectを継承したデータベースエンティティ</span></span>
<span class="line"><span>    │   ├── enums           // enum</span></span>
<span class="line"><span>    │   ├── helper          // ヘルパーパッケージ(正直Utilパッケージと区別ない)</span></span>
<span class="line"><span>    │   └── rx              // 独自Observable/Operatorクラス類</span></span>
<span class="line"><span>    ├── ui</span></span>
<span class="line"><span>    │   ├── activity        // Activity</span></span>
<span class="line"><span>    │   ├── adapter         // RecyclerView/ViewPagerのアダプタ類</span></span>
<span class="line"><span>    │   │   └── decoration  // RecyclerViewのItemDecorationクラス</span></span>
<span class="line"><span>    │   ├── fragment        // Fragment</span></span>
<span class="line"><span>    │   ├── listener        // Activity/Fragmentのリスナinterface</span></span>
<span class="line"><span>    │   └── view            // Custom View</span></span>
<span class="line"><span>    └── util                // Utility</span></span></code></pre></div><h2 id="総括" tabindex="-1">総括 <a class="header-anchor" href="#総括" aria-label="Permalink to &quot;総括&quot;">​</a></h2><p>二日間の目標で走り始めたけど、結局三日間くらいかかってしまった(Wakatime調べ)。<br> でも、Fabric Twitter KitとかAndroid Design Support LibraryとかRecyclerViewのItemTouchHelperとか、新しい知見も結構得られたのでとても良かったと思う。<br> 小さな課題を設定して短期間でアプリを作るの、結構身になるようなので今後もやっていこう。</p><h2 id="今後" tabindex="-1">今後 <a class="header-anchor" href="#今後" aria-label="Permalink to &quot;今後&quot;">​</a></h2><p><a href="https://about.twitter.com/ja/company/display-requirements" target="_blank" rel="noreferrer">Twitterの表示要件</a>に沿ってないので、特にGoogle Play Storeで公開することは考えてない。<br> 欲しい機能があったら追加していくくらいの感覚。</p><h2 id="open-source" tabindex="-1">Open Source! <a class="header-anchor" href="#open-source" aria-label="Permalink to &quot;Open Source!&quot;">​</a></h2><p><a href="https://github.com/yshrsmz/photosearcher" target="_blank" rel="noreferrer">Github</a>で公開してるので、お好きに見ていただけたらいいと思います。</p>`,36)])])}const g=r(p,[["render",o]]);export{b as __pageData,g as default};
