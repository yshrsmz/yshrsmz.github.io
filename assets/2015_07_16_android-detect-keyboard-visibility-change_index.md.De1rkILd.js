import{_ as s,a,o as n,X as t}from"./chunks/framework.Cp7KI1mb.js";const y=JSON.parse('{"title":"(Android) キーボードの表示切り替えを検知する","description":"","frontmatter":{"layout":"post","title":"(Android) キーボードの表示切り替えを検知する","category":"programming","tags":["Android"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2015/07/16/android-detect-keyboard-visibility-change/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2015/07/16/android-detect-keyboard-visibility-change/"}],["meta",{"property":"og:title","content":"(Android) キーボードの表示切り替えを検知する"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2015/07/16/android-detect-keyboard-visibility-change/ogp.png"}]]},"headers":[],"relativePath":"2015/07/16/android-detect-keyboard-visibility-change/index.md","filePath":"posts/2015/2015-07-16-android-detect-keyboard-visibility-change.md","date":{"time":"2015-07-16","string":"July 16, 2015","year":"2015","month":"07","day":"16"}}'),e={name:"2015/07/16/android-detect-keyboard-visibility-change/index.md"};function p(h,i,l,k,r,d){return n(),a("div",null,[...i[0]||(i[0]=[t(`<p>Androidではキーボードの表示・非表示の切り替えを判定するイベントは、標準では用意されていません。<br> そこで、自前でキーボードの表示状態を判定する必要があります。</p><p>日本語のドキュメントを探したところ、LinearLayout等を拡張し、<code>onMeasure</code>でディスプレイの高さとビューの高さを比較する実装の記事をいくつか発見しました。</p><p>しかし、この方法だと全レイアウトを拡張したものを用意せねばならず、効率的ではありません。</p><p>この記事では、<code>ViewTreeObserver</code>を利用したもう少しイケてる実装方法を紹介します。</p><p>コードとしては以下のとおりです。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnKeyboardVisibilityListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onVisibilityChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> isVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setKeyboardListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OnKeyboardVisibilityListener listener) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View activityRootView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((ViewGroup)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(android.R.id.content)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChildAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  activityRootView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getViewTreeObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addOnGlobalLayoutListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnGlobalLayoutListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasOpend;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rect r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onGlobalLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      activityRootView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWindowVisibleDisplayFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 画面の高さとビューの高さを比べる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heightDiff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activityRootView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRootView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heightDiff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasOpened) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // キーボードの表示状態は変わっていないはずなので何もしない</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      wasOpened </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOpen;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      listener.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onVisibilityChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isOpen);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Activityに記述することを想定していますが、Activityが取得できればFragmentでもどこでも構いません。 <code>getWindowVisibleDisplayFragme(Rect)</code>で、ビューが配置されているディスプレイのサイズが取得できます。<br><code>android.R.id.content</code>直下の一つ目の子要素を取得することで、ユーザーがいじれる一番外側のビューを取得できます。<br> 基本的にはActivityのレイアウトXMLで記述している<code>FrameLayout</code>や<code>LinearLayout</code>、<code>RelativeLayout</code>のような要素です。</p><p><code>onGlobalLayout</code>はレンダリング後に呼ばれるので、ここでディスプレイの高さと実際のビューの高さを比べることで画面にビュー以外の「何か」が表示されているかどうか判定することができます。</p><p>ここでは、差が100ピクセルもあれば、その表示されている「何か」はキーボードだろうと仮定しています。 (2015/7/16追記: コードでは100ピクセル決め打ちしていますが、実際には100sp(ディスプレイ解像度にあった値)で検知するのがよいです)</p><p>この記述をActivityの基礎クラスにでも書いておけば、それを継承するすべてのActivityで使用することができます。 ViewGroup系のクラスを拡張する必要がないので、非常にコードやレイアウトXMLが綺麗になると思います。</p><p>サンプルのコードではinterfaceを利用したコールバック形式で書いていますが、<a href="http://square.github.io/otto/" target="_blank" rel="noreferrer">Otto</a>のようなイベントバスライブラリを利用してもいいと思います(私も実業務ではOttoと組み合わせて使用しています)。</p><p>こちらからは以上です。</p><p>参考: <a href="http://stackoverflow.com/questions/2150078/how-to-check-visibility-of-software-keyboard-in-android" target="_blank" rel="noreferrer">How to check visibility of software keyboard in Android? - Stack Overflow</a></p>`,13)])])}const o=s(e,[["render",p]]);export{y as __pageData,o as default};
