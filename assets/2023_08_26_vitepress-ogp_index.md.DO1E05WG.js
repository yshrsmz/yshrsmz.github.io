import{_ as i,a,o as t,X as n}from"./chunks/framework.Cp7KI1mb.js";const e="/assets/img/posts/2023/08/26/ogp_sample.png",d=JSON.parse('{"title":"ブログ各記事の OG 画像を作った","description":"","frontmatter":{"layout":"post","title":"ブログ各記事の OG 画像を作った","tags":["Vue.js","VitePress"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2023/08/26/vitepress-ogp/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2023/08/26/vitepress-ogp/"}],["meta",{"property":"og:title","content":"ブログ各記事の OG 画像を作った"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2023/08/26/vitepress-ogp/ogp.png"}]]},"headers":[],"relativePath":"2023/08/26/vitepress-ogp/index.md","filePath":"posts/2023/2023-08-26-vitepress-ogp.md","date":{"time":"2023-08-26","string":"August 26, 2023","year":"2023","month":"08","day":"26"}}'),l={name:"2023/08/26/vitepress-ogp/index.md"};function p(h,s,k,r,o,E){return t(),a("div",null,[...s[0]||(s[0]=[n('<p>ブログ作り直したので、ついでに OG 画像もタイトル入ったやつをちゃんと作ろうと思い立った。</p><p><strong>目次</strong></p><nav class="table-of-contents"><ul><li><a href="#手段">手段</a><ul><li><a href="#canvas-api">Canvas API</a></li><li><a href="#html-から生成できないか。">HTML から生成できないか。</a></li></ul></li><li><a href="#実装">実装</a></li><li><a href="#どのタイミングで出力するか">どのタイミングで出力するか</a></li></ul></nav><h2 id="手段" tabindex="-1">手段 <a class="header-anchor" href="#手段" aria-label="Permalink to &quot;手段&quot;">​</a></h2><p>OG 画像の作り方にはいくつか種類がある。</p><h3 id="canvas-api" tabindex="-1">Canvas API <a class="header-anchor" href="#canvas-api" aria-label="Permalink to &quot;Canvas API&quot;">​</a></h3><p>たとえば Canvas API。JavaScript で画像つくる、といったら Canvas API なので一番に思いついたのはこれだけど、JavaScript の Canvas API はテキストの折返しをサポートしていない。文字幅計算しつつ自前で折り返すこともできなくはないけど、横文字と日本語で折返しの規則違うし、その辺を真面目にやろうと思うと明らかにめんどくさすぎる。</p><p>というわけで今回 Canvas の利用は見送ることにする。</p><p>どこかで採用することになったら、<a href="https://github.com/Automattic/node-canvas" target="_blank" rel="noreferrer">Automattic/node-canvas</a> よりは <a href="https://github.com/Brooooooklyn/canvas" target="_blank" rel="noreferrer">Brooooooklyn/canvas</a> がいいかもしれない。前者はビルドに色々ツールのインストールが必要だけど、後者はスタンドアロンで動かすことができる。</p><h3 id="html-から生成できないか。" tabindex="-1">HTML から生成できないか。 <a class="header-anchor" href="#html-から生成できないか。" aria-label="Permalink to &quot;HTML から生成できないか。&quot;">​</a></h3><p>で、次に考えたのが HTML から PNG 画像にできないか、ということ。<br> HTML であればテキストの折返しも自動でできるし、スタイルもある程度直感的にあてられる。</p><p>どうやら HTML -&gt; Canvas -&gt; SVG -&gt; PNG という順序ならできるらしい。</p><p>探してみたら、Vercel が提供する <a href="https://www.npmjs.com/package/@vercel/og" target="_blank" rel="noreferrer"><code>@vercel/og</code></a> というそのものズバリなパッケージが存在した。ただこれは Vercel 環境上で動かすことを想定しているのでそのままでは使えなさそう。加えて、どうやらクローズドソースらしい。</p><p>ただ、NPM 上の README を見てると、参考にしているライブラリのクレジットがあった。</p><blockquote><p>Acknowledgements<br> This project will not be possible without the following projects:</p><p>Satori<br> Twemoji<br> Google Fonts and Noto Sans<br> Resvg and Resvg.js</p></blockquote><p>というわけでこれらを参考にしたら、 OG 画像が生成できそう。</p><p>結論から言うと、 <a href="https://github.com/vercel/satori" target="_blank" rel="noreferrer">vercel/satori</a> と <a href="https://github.com/yisibl/resvg-js" target="_blank" rel="noreferrer">yisibl/resvg-js</a> で実現できた。</p><h2 id="実装" tabindex="-1">実装 <a class="header-anchor" href="#実装" aria-label="Permalink to &quot;実装&quot;">​</a></h2><p>こんな画像ができた</p><p><img src="'+e+`" alt="OG画像サンプル"></p><p>手順としては、</p><ol><li>Satori で HTML から SVG を生成する</li><li>1 の SVG を、 Resvg.js で png にする</li><li>fs で成果物を書き出す</li></ol><p>となる。</p><h4 id="satori" tabindex="-1">Satori <a class="header-anchor" href="#satori" aria-label="Permalink to &quot;Satori&quot;">​</a></h4><p>Satori は HTML を SVG に変換してくれるわけだけど、 <code>ReactNode</code> で渡すことしかできない。これは Vercel が Next.js の開発元であること、 Satori が内部で <a href="https://yogalayout.com/" target="_blank" rel="noreferrer">Yoga</a> という、ReactNative と同じレイアウトシステムを使っていることを鑑みればさもありなん、という感じ。</p><p>とはいえ、だから JSX で書く必要がある、というわけではない。<br> Satori の README にも <a href="https://github.com/vercel/satori#use-without-jsx" target="_blank" rel="noreferrer">JSX 無しでつかうことに言及したセクション</a>があり、下記のようにある</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> satori</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello, world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      style: { color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>今回は下記のような HTML(+CSS) なので、これをいい感じに上記記法に変換する。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;display: flex; flex-direction: column; align-items: center; width: 100%; height: 100%; background-color: white; font-size: 48px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;display: flex; flex-direction: column; align-items: center; height: 100%; padding: 20px 56px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;display: flex; align-items: center; flex-grow: 1; font-weight: 700;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;ブログ各記事の OG 画像を作った&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: 42px; font-weight: 400;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;August 26, 2023&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: 48px; font-weight: 700;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;codingfeline.com&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> satori</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ↑ の HTML を ReactNode の記法に変換したもの</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">630</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fonts: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 利用するフォントの設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>あとは Resvg.js で PNG に変換、実ファイルに書き出すだけ</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resvg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(svg)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pngData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resvg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pngBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pngData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asPng</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OUTPUT_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pngBuffer)</span></span></code></pre></div><h2 id="どのタイミングで出力するか" tabindex="-1">どのタイミングで出力するか <a class="header-anchor" href="#どのタイミングで出力するか" aria-label="Permalink to &quot;どのタイミングで出力するか&quot;">​</a></h2><ol><li><code>.vitepress/config.ts</code> の <code>transformPageData</code> で各記事の frontmatter に OG 情報を追加し</li><li><code>.vitepress/config.ts</code> の <code>buildEnd</code> でまとめて各記事の OG 画像を生成する</li></ol><ul><li><code>transformPageData</code> はまだ記事 HTML が生成される前なので、この段階で画像生成しても HTML 生成時に消されてしまう</li></ul>`,35)])])}const c=i(l,[["render",p]]);export{d as __pageData,c as default};
