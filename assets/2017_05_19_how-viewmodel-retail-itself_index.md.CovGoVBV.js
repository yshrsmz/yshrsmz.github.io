import{_ as i,a as s,o as a,X as t}from"./chunks/framework.Cp7KI1mb.js";const k=JSON.parse('{"title":"(Android) Architecture ComponentsのViewModelは如何にしてRotationを生き残るか","description":"","frontmatter":{"layout":"post","title":"(Android) Architecture ComponentsのViewModelは如何にしてRotationを生き残るか","category":"programming","tags":["Android","java"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2017/05/19/how-viewmodel-retail-itself/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2017/05/19/how-viewmodel-retail-itself/"}],["meta",{"property":"og:title","content":"(Android) Architecture ComponentsのViewModelは如何にしてRotationを生き残るか"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2017/05/19/how-viewmodel-retail-itself/ogp.png"}]]},"headers":[],"relativePath":"2017/05/19/how-viewmodel-retail-itself/index.md","filePath":"posts/2017/2017-05-19-how-viewmodel-retail-itself.md","date":{"time":"2017-05-19","string":"May 19, 2017","year":"2017","month":"05","day":"19"}}'),n={name:"2017/05/19/how-viewmodel-retail-itself/index.md"};function o(l,e,d,r,p,h){return a(),s("div",null,[...e[0]||(e[0]=[t(`<h2 id="tl-dl" tabindex="-1">TL;DL; <a class="header-anchor" href="#tl-dl" aria-label="Permalink to &quot;TL;DL;&quot;">​</a></h2><p><code>retainInstance = true</code>なFragmentにキャッシュされているので、Activity/Fragmentが本当に殺されるまで生き残ることができる。</p><hr><p>Google I/O 2017で、<a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="noreferrer"><code>Architecture Components</code></a> という新しいライブラリ群が発表されました。</p><p><code>LiveData</code>, <code>ViewModel</code>, <code>LifecycleObserver</code>, <code>LifecycleOwner</code>, <code>Room</code>といったこれらのライブラリは、開発者がより強固で、テスタブルで、かつメンテナンス性が高いアプリケーションを作るための手助けとなるべく作られています。</p><p>今回はその中でも<code>ViewModel</code>について少し調べてみました。</p><h2 id="what-is-viewmodel" tabindex="-1">What is ViewModel? <a class="header-anchor" href="#what-is-viewmodel" aria-label="Permalink to &quot;What is ViewModel?&quot;">​</a></h2><p>詳しい説明は<a href="https://developer.android.com/topic/libraries/architecture/viewmodel.html" target="_blank" rel="noreferrer"><code>ViewModel</code>のリファレンス</a>に譲りますが、簡単に言うと「Activity/Fragmentのローテーション等による再生成をこえて状態を保持するためのコンポーネント」です。</p><p>今までActivity/Fragmentのメンバ変数に保存していたような値や非同期処理を<code>ViewModel</code>に書いておけば、Activity/Fragmentが再生成されたとしても値や非同期処理の状態が維持されてそのまま使えます。</p><p><code>onSavedInstanceState</code>でいちいち<code>Bundle</code>に詰め込んだりしなくてすみます。 私自身はあまり使ったことがありませんが、<code>AsyncTask</code>等をいちいち書く必要がなくなります。</p><p>でも、どうやって？</p><h2 id="how-does-viewmodel-retain-itself" tabindex="-1">How does ViewModel retain itself? <a class="header-anchor" href="#how-does-viewmodel-retain-itself" aria-label="Permalink to &quot;How does ViewModel retain itself?&quot;">​</a></h2><p>※これはGoogle I/O 2017で発表された1.0.0-alpha1時点での話です</p><p><code>ViewModel</code>は下記のような感じで取得します。使う側のActivity/Fragmentではキャッシュから取得するとか新規作成するとか、そういうことを意識する必要はありません。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FooViewModel viewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewModelProviders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FooViewModel.class);</span></span></code></pre></div><p><code>ViewModelProviders#of</code>にはActivityかFragmentを渡すことができます。一つ注意することがあって、Fragmentを渡すときは<code>fragment.getActivity() != null</code>でなければならず、detachされているFragmentでは使うことができません。</p><p><code>ViewModelProviders#of</code>はActivity/Fragmentのみを引数に取るものと、Activity/Fragmentに加えて<code>ViewModel</code>のファクトリクラスを引数に取るものがあります。</p><p>ファクトリクラスを渡さない場合は引数なしのコンストラクタを呼び出して<code>ViewModel</code>をインスタンス化するようです。</p><p>また、<code>ViewModel</code>の代わりに<code>AndroidViewModel</code>というinterfaceを実装すると引数が<code>Application</code>のコンストラクタを使う模様です。</p><p>Dagger等のDIライブラリを使う場合はファクトリクラスを使うことになりそうです。</p><p>さて、<code>ViewModelProvider</code>はこんな感じでインスタンス化されています。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ViewModelProviders.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewModelProvider </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Fragment fragment) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FragmentActivity activity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (activity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Can&#39;t create ViewModelProvider for detached fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        initializeFactoryIfNeeded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewModelProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ViewModelStores.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment), sDefaultFactory);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>呼び出されているコンストラクタのシグネチャはこんな具合です。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ViewModelProvider(ViewModelStore store, ViewModelProvider.Factory factory)</span></span></code></pre></div><p><code>ViewModelStore</code>とかいかにもあやしい名前のクラスが引数にあるので詳しく見てみましょう。 <code>ViewModelStores#of</code>の中を見てみるとこんな感じ</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewModelStore </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Fragment fragment) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HolderFragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">holderFragmentFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getViewModelStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>HolderFragment</code>なるものが出てきました。</p><p>コードを見てみると、コンストラクタで<code>setRetainInstance(true);</code>を呼んでいます。<code>retainInstance = true</code>にすると親Activity/Fragmentが再生成されても対象のFragmentは生き残るようになるので、この仕組みを使って<code>ViewModel</code>をActivity/fragmentの再生成後も使えるようにしているようです。</p><p><code>ViewModelStore</code>はこの<code>HolderFragment</code>で管理されています。</p><p><code>ViewModelStore</code>の実態は<code>HashMap&lt;String, ViewModel&gt;</code>です。ここで基本的には<code>ViewModel</code>のクラス名をキーとして<code>ViewModel</code>のインスタンスを管理しています。</p><p><code>HolderFragment</code>はActivity/Fragment毎に作られるので、一つの<code>ViewModelStore</code>が管理するのは自<code>HolderFragment</code>の直接の親Activity/Fragmentの<code>ViewModel</code>だけです。</p><p>クラス名がキーなので同一Activity内、同一Fragment内で同じ<code>ViewModel</code>を複数使うことはできなそうな感じもしましたが、よくよく見ると外部からキーを指定できる<code>get</code>メソッドのオーバーロードも用意されていたので一応そういうユースケースも考慮されていそうです。</p><p><code>ViewModel</code>の保存周り、ホントはもうちょっとゴニョゴニョしてるんだけど概要としてはこんな感じです。とてもわかりやすいコードなのでぜひ一読してみてください。</p><h2 id="終わりに" tabindex="-1">終わりに <a class="header-anchor" href="#終わりに" aria-label="Permalink to &quot;終わりに&quot;">​</a></h2><p>ここ一年くらい触ってるyet another Fragmentの<a href="https://github.com/bluelinelabs/Conductor" target="_blank" rel="noreferrer">Conductor</a>がController(Fragmentのようなもの)をキャッシュするのにやっぱり<code>retainInstance = true</code>なFragmentを使ってて、Architecture Componentsの発表を聞いたときに同じようなことやってるのかなーって思ってたら案の定でちょっとニンマリしてしまった。</p><p>特に黒魔術してるわけでもなく、既存の仕組みをうまく使ってるだけなのでこの仕組み自体が黒歴史になることはなさそう。</p><p><code>ViewModel</code>はActivity/Fragmentへの参照を持つことは推奨されてないので必然的にユニットテストしやすいコードになっていきそう。</p><p>とはいえ<code>ViewModel</code>だけで完全にテスタブルになるわけではないし、<code>ViewModel</code>はActivity/Fragmentの再生成をこえた状態のキャッシュに一つの道を示しただけなので、これですべてが解決するわけではない。</p><p>今までの知見と組み合わせつつ、幸せになれるコードを書けるようやっていきましょう、ということでざっくりとしたコードリーディングを終わります。</p>`,39)])])}const g=i(n,[["render",o]]);export{k as __pageData,g as default};
