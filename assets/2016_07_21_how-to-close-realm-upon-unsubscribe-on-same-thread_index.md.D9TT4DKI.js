import{_ as i,a,o as t,X as n}from"./chunks/framework.Cp7KI1mb.js";const c=JSON.parse('{"title":"続:Realmインスタンスを、Observableのunsubscribe時に同じスレッドでunsubscribeする","description":"","frontmatter":{"layout":"post","title":"続:Realmインスタンスを、Observableのunsubscribe時に同じスレッドでunsubscribeする","category":"programming;","tags":["Android","realm","rxjava"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2016/07/21/how-to-close-realm-upon-unsubscribe-on-same-thread/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2016/07/21/how-to-close-realm-upon-unsubscribe-on-same-thread/"}],["meta",{"property":"og:title","content":"続:Realmインスタンスを、Observableのunsubscribe時に同じスレッドでunsubscribeする"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2016/07/21/how-to-close-realm-upon-unsubscribe-on-same-thread/ogp.png"}]]},"headers":[],"relativePath":"2016/07/21/how-to-close-realm-upon-unsubscribe-on-same-thread/index.md","filePath":"posts/2016/2016-07-21-how-to-close-realm-upon-unsubscribe-on-same-thread.md","date":{"time":"2016-07-21","string":"July 21, 2016","year":"2016","month":"07","day":"21"}}'),e={name:"2016/07/21/how-to-close-realm-upon-unsubscribe-on-same-thread/index.md"};function h(l,s,p,k,r,E){return t(),a("div",null,[...s[0]||(s[0]=[n(`<p><a href="/2016/07/08/how-to-close-realm-upon-unsubscribe/">前回</a>の続きです。</p><p><code>Observable#using</code>を使うと、Observableのunsubscribe時にRealmインスタンスを同じスレッド上で閉じることができるよ、と前回の記事で書きました。</p><p>結論から言うと前回のコードだけでは足りませんでした。<br> 大体の場合において同じスレッド上でcloseされるのですが、たまに別スレッドで閉じられてしまう、ということがわかりました。</p><p>Twitter上でうんうん言いながらRxJavaのコードを読みながら再現するコードを書こうとしてたら、<a href="https://twitter.com/hydrakecat" target="_blank" rel="noreferrer">@hydrakecat</a>さんが捕捉してくださり、さくっと再現させてくれました。</p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">やはり頑張ってRxJavaとRealmのコードを読み込むしかない</p>— せーい(yshrsmz) (@_yshrsmz) <a href="https://twitter.com/_yshrsmz/status/753075450906378241">2016年7月13日</a></blockquote><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/_yshrsmz">@_yshrsmz</a> うーん、再現したかも。とりあえず、このコードを何回も実行するとたまに main スレッドでクローズされますね。<a href="https://t.co/EHda8VQeEh">https://t.co/EHda8VQeEh</a></p>— Hiroshi Kurokawa (@hydrakecat) <a href="https://twitter.com/hydrakecat/status/753121477050953728">2016年7月13日</a></blockquote><p>最初は毎回再現するわけじゃないしバグなのかな？　と思っていたのですが、どうやら<code>Observable#subscribeOn</code>はunsubscribeするスレッドを関知しないようでした。</p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/_yshrsmz">@_yshrsmz</a> ううん、微妙なんですよね。subscribeOn() の JavaDoc には unsubscribe のスケジューラについて一言も書かれていませんし……。もうちょっとドキュメントとコードを当たってみます。</p>— Hiroshi Kurokawa (@hydrakecat) <a href="https://twitter.com/hydrakecat/status/753174895706509313">2016年7月13日</a></blockquote><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hydrakecat">@hydrakecat</a> <a href="https://twitter.com/_yshrsmz">@_yshrsmz</a> unSubscribeOnでスレッド明示すればいいって話ではない感じですか？</p>— ちばっちんぐ (@chibatching) <a href="https://twitter.com/chibatching/status/753176554293694464">2016年7月13日</a></blockquote><p>じゃあ<code>Observable#unsubscribeOn</code>指定したらいいじゃん？　というわけにもいきません。<code>Schedulers.io()</code>等のRxJavaが標準で用意しているスケジューラは、実行時にスレッドプールから適当なスレッドを渡すためです。</p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/_yshrsmz">@_yshrsmz</a> <a href="https://twitter.com/chibatching">@chibatching</a> あ、駄目だ。Shcedulers.io() とか使うとスレッドが一緒になる保証ないですね……。自分でシングルスレッドのスケジューラ作らないといけないかも。</p>— Hiroshi Kurokawa (@hydrakecat) <a href="https://twitter.com/hydrakecat/status/753178239770562560">2016年7月13日</a></blockquote><p>シングルスレッドのスケジューラだとRealm関連の操作が全部直列になってしまうしパフォーマンス的に良くないよな〜と思っていろいろ考えたのですが、妙案は思いつかず。<br> 最後の手段、ということでRxJavaのGithubレポにissueを投げてみました。</p><p><a href="https://github.com/ReactiveX/RxJava/issues/4197" target="_blank" rel="noreferrer">Question about Observable.using&#39;s resourceFactory &amp; disposeAction #4197 ReactiveX/RxJava</a></p><p>回答は以下のような感じでした。</p><blockquote><p>Hi.</p><ol><li>Yes. The operator doesn&#39;t deal with scheduling.</li><li>Not with subscribeOn; try unsubscribeOn but you need a single-threaded Scheduler as all the default ones will give you different threads most likely.</li></ol></blockquote><p>やはり、<a href="https://twitter.com/hydrakecat" target="_blank" rel="noreferrer">@hydrakecat</a>さんと<a href="https://twitter.com/chibatching" target="_blank" rel="noreferrer">@chibatching</a>さんがおっしゃっていたように<code>Observable#unsbscribeOn</code>とシングルスレッドのスケジューラを合わせるのが正攻法のようです。</p><p>最終的な解決策は上述のissueにも書きましたが、複数のシングルスレッドスケジューラを順番に使い回す、という形になりました。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealmSchedulerPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RealmScheduler-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; SCHEDULERS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Schedulers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newSingleThreadExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RxThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Schedulers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newSingleThreadExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RxThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Schedulers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newSingleThreadExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RxThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AtomicLong COUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealmSchedulerPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // no-op</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scheduler </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAndIncrement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SCHEDULERS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 is the size of SCHEDULERS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Observable.Transformer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T, T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doInRealmScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tObservable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Scheduler s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RealmSchedulerPool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tObservable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribeOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribeOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これを前回のコードと合わせて下記のように使います。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asObservable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doInRealmScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> realm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.class).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>助言をくださった<a href="https://twitter.com/hydrakecat" target="_blank" rel="noreferrer">@hydrakecat</a>さん、<a href="https://twitter.com/chibatching" target="_blank" rel="noreferrer">@chibatching</a>さん、ありがとうございました。</p>`,21)])])}const o=i(e,[["render",h]]);export{c as __pageData,o as default};
