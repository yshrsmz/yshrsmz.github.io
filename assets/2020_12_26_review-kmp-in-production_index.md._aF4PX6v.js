import{_ as s,a as i,o as n,X as p}from"./chunks/framework.Cp7KI1mb.js";const c=JSON.parse('{"title":"Kotlin Multiplatform Projectを導入してみて","description":"","frontmatter":{"layout":"post","title":"Kotlin Multiplatform Projectを導入してみて","category":"programming","tags":["kotlin","kmp"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2020/12/26/review-kmp-in-production/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2020/12/26/review-kmp-in-production/"}],["meta",{"property":"og:title","content":"Kotlin Multiplatform Projectを導入してみて"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2020/12/26/review-kmp-in-production/ogp.png"}]]},"headers":[],"relativePath":"2020/12/26/review-kmp-in-production/index.md","filePath":"posts/2020/2020-12-26-review-kmp-in-production.md","date":{"time":"2020-12-26","string":"December 26, 2020","year":"2020","month":"12","day":"26"}}'),e={name:"2020/12/26/review-kmp-in-production/index.md"};function t(l,a,h,r,d,k){return n(),i("div",null,[...a[0]||(a[0]=[p(`<p>本記事は<a href="https://qiita.com/advent-calendar/2020/android" target="_blank" rel="noreferrer">Android Advent Calendar 2020</a>の24日目です。</p><p>この記事は某勉強会で発表したもののトランスクリプト＋αです。</p><p>実際に仕事のAndroidアプリでKotlin Multiplatform Project(以後KMP)を導入してみてどんな感じだったか、というのをまとめていきます。</p><p><strong>目次</strong></p><nav class="table-of-contents"><ul><li><a href="#前提">前提</a></li><li><a href="#コード割合">コード割合</a></li><li><a href="#アーキテクチャ">アーキテクチャ</a><ul><li><a href="#レポジトリ構成">レポジトリ構成</a></li><li><a href="#ci">CI</a></li><li><a href="#kmpコードのアーキテクチャ">KMPコードのアーキテクチャ</a></li><li><a href="#viewmodelのインターフェイス">ViewModelのインターフェイス</a></li><li><a href="#共通化できないコードを共通コードで使う">共通化できないコードを共通コードで使う</a></li><li><a href="#利用しているkmpのライブラリ">利用しているKMPのライブラリ</a></li></ul></li><li><a href="#kmpのメリット">KMPのメリット</a><ul><li><a href="#使い慣れた言語で書ける">使い慣れた言語で書ける</a></li><li><a href="#工数削減">工数削減</a></li><li><a href="#用語-仕様に差が生まれない">用語/仕様に差が生まれない</a></li><li><a href="#viewを各プラットフォームで書ける">Viewを各プラットフォームで書ける</a></li><li><a href="#導入する範囲を選べる">導入する範囲を選べる</a></li></ul></li><li><a href="#kmpのデメリット">KMPのデメリット</a><ul><li><a href="#学習コスト">学習コスト</a></li><li><a href="#kmpはまだα版">KMPはまだα版</a></li></ul></li><li><a href="#まとめ">まとめ</a><ul><li><a href="#kmpを使ってよかったか">KMPを使ってよかったか</a></li><li><a href="#kmpをおすすめできるか">KMPをおすすめできるか</a></li></ul></li></ul></nav><h2 id="前提" tabindex="-1">前提 <a class="header-anchor" href="#前提" aria-label="Permalink to &quot;前提&quot;">​</a></h2><ul><li>チーム構成: Android、iOS、デザイナー、バックエンド、各一人ずつ</li><li>API: GraphQL</li><li>参照系がメインのシンプルなアプリ</li></ul><h2 id="コード割合" tabindex="-1">コード割合 <a class="header-anchor" href="#コード割合" aria-label="Permalink to &quot;コード割合&quot;">​</a></h2><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fwBbQWoRzuihsoRs_IcPmqPuavNS4U0zCf0bPu_NVFv0iHFm9-taKVmMeVYJrYtyKjZzwBGU4LRZp8cDxnnkmihNnjnP9hW3pyh2XjGLgJMDNHDdgAq51tpCBXYz1vmF1uK_k06bQVNBlDeHKRvutCbQ=w616-h314-no?authuser=0" alt=""></p><p>GitHubのコード割合的にはこんな感じです。Kotlinが48%。 ただこれだとノイズが多いので、もう少しシンプルにしてみましょう。</p><p>まず、Objective-CとJavaは古の社内ライブラリなので除外します。<br> その他、レイアウトファイルやら設定ファイルやら諸々も除外して、純粋にKotlinとSwiftの行数のみで比較してみます。<br> そうすると、こんな感じになります。</p><table tabindex="0"><thead><tr><th>区分</th><th>割合</th></tr></thead><tbody><tr><td>KMP</td><td>68%</td></tr><tr><td>Android(Kotlin)</td><td>16%</td></tr><tr><td>iOS(Swift)</td><td>16%</td></tr></tbody></table><p>全体のおよそ7割がKotlinで書かれた共通コードです。<br> この数字はiOS/Android合わせた全体に対しての比率なので、各OS毎で計算すると8割近くが共通コードとなっています。</p><h2 id="アーキテクチャ" tabindex="-1">アーキテクチャ <a class="header-anchor" href="#アーキテクチャ" aria-label="Permalink to &quot;アーキテクチャ&quot;">​</a></h2><h3 id="レポジトリ構成" tabindex="-1">レポジトリ構成 <a class="header-anchor" href="#レポジトリ構成" aria-label="Permalink to &quot;レポジトリ構成&quot;">​</a></h3><p>レポジトリ構成はモノレポを採用しています。KMP, Android, iOSすべてのコードを一つのレポジトリで管理している、ということです。</p><p>モノレポを採用している理由はいくつかあるのですが、一番大きいのは「共通コードの読み込みが簡単」というものです。</p><p>モノレポじゃない選択肢としてKMP, Android, iOSをそれぞれ別個のレポジトリで管理する、というものも考えられます。<br> しかし、その場合だとKMPの成果物を各OSのレポジトリから使用する際にひと手間必要になってきます。</p><p>git submoduleで読み込むのか</p><p>privateなMaven RepositoryやCocoaPods Repositoryを作るのか</p><p>あるいはsymlinkか…？</p><p>などなど。<br> モノレポであればこういったことに悩む必要はありません。</p><p>今回のプロジェクトではAndroid/iOS間でのコード共有だけだったのでこの方針にしましたが、サーバサイドとのコード共有もしたい、とか要件が複雑になってきたらレポジトリの分割を検討してもいいと思います。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── android-features</span></span>
<span class="line"><span>│   ├── common</span></span>
<span class="line"><span>│   └── debugmenu</span></span>
<span class="line"><span>├── androidApp</span></span>
<span class="line"><span>├── core</span></span>
<span class="line"><span>│   ├── base</span></span>
<span class="line"><span>│   ├── di</span></span>
<span class="line"><span>│   ├── model</span></span>
<span class="line"><span>│   └── semver</span></span>
<span class="line"><span>├── data</span></span>
<span class="line"><span>│   ├── graphql-api</span></span>
<span class="line"><span>│   ├── graphql-document</span></span>
<span class="line"><span>│   ├── local</span></span>
<span class="line"><span>│   ├── remote</span></span>
<span class="line"><span>│   └── repository</span></span>
<span class="line"><span>├── domain</span></span>
<span class="line"><span>├── features</span></span>
<span class="line"><span>│   ├── domain</span></span>
<span class="line"><span>│   └── presentation</span></span>
<span class="line"><span>├── iosApp</span></span>
<span class="line"><span>├── presentation</span></span>
<span class="line"><span>│   ├── analytics</span></span>
<span class="line"><span>│   ├── auth</span></span>
<span class="line"><span>│   ├── build</span></span>
<span class="line"><span>│   ├── error</span></span>
<span class="line"><span>│   ├── message</span></span>
<span class="line"><span>│   ├── presentation-all</span></span>
<span class="line"><span>│   ├── presentation-base</span></span>
<span class="line"><span>│   └── servicestatus</span></span>
<span class="line"><span>└── testing</span></span>
<span class="line"><span>    ├── annotation</span></span>
<span class="line"><span>    └── mpp-test</span></span></code></pre></div><p>ディレクトリ構成はおおよそこんな感じです。<br><code>android-features</code>, <code>androidApp</code>, <code>iosApp</code>以外がKMPのモジュールです。</p><p>モノレポにした副次的なメリットとして、自分の直接担当してないOSのコードへのオーナーシップが生まれる、というのがありました。<br> iOSの人が共通コードを書く際はKMPのコードとiOS側のコードが含まれるPRを作るわけで、そうすると自然とiOSのコードも読むようになります。次第にiOS側のコードに対する提案とか、もっと言うとKMPのコードに対応するAndroid/iOSのコードを両方とも一人で書いてしまう、ということも相互に発生するようになってきました。</p><h3 id="ci" tabindex="-1">CI <a class="header-anchor" href="#ci" aria-label="Permalink to &quot;CI&quot;">​</a></h3><p>CIはbitriseを採用しています。設定は特に凝ったことをする必要はなくて、一つのレポジトリに対してAndroidとiOSのCI設定をそれぞれ行うだけです。</p><p>PRが作られたりコミットがpushされると、AndroidとiOSのビルドが同時並行で走ります。 iOS向けのビルドではKotlin/Nativeのテストを行い、Android向けのビルドではKotlin/JVMのテストを行います。</p><p>iOSのビルドはどうしても時間がかかってしまうので、ktlintなど共通コード向けのLintはより軽量なAndroidのCIで実施しています。</p><h3 id="kmpコードのアーキテクチャ" tabindex="-1">KMPコードのアーキテクチャ <a class="header-anchor" href="#kmpコードのアーキテクチャ" aria-label="Permalink to &quot;KMPコードのアーキテクチャ&quot;">​</a></h3><p>全体的にはレイヤードアーキテクチャを採用しています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+-----------+</span></span>
<span class="line"><span>| ViewModel |</span></span>
<span class="line"><span>+-----------+</span></span>
<span class="line"><span>    |  |</span></span>
<span class="line"><span>    |  +----------+</span></span>
<span class="line"><span>    V             V</span></span>
<span class="line"><span>+---------+   +---------+</span></span>
<span class="line"><span>| UseCase |   | UseCase |</span></span>
<span class="line"><span>+---------+   +---------+</span></span>
<span class="line"><span>    | |               |</span></span>
<span class="line"><span>    | +------------+  |</span></span>
<span class="line"><span>    V              V  V</span></span>
<span class="line"><span>+------------+   +------------+</span></span>
<span class="line"><span>| Repository |   | Repository |</span></span>
<span class="line"><span>+------------+   +------------+</span></span>
<span class="line"><span>    |  |                    |</span></span>
<span class="line"><span>    |  +---------------+    +-----...</span></span>
<span class="line"><span>    V                  V</span></span>
<span class="line"><span>+------------+   +-----------+</span></span>
<span class="line"><span>| RemoteData |   | LocalData |</span></span>
<span class="line"><span>+------------+   +-----------+</span></span></code></pre></div><p>クラスの依存グラフはおおよそこんな感じになっています。レイヤードアーキテクチャのよくある構成になっているのではないかと思います。</p><p>プレゼンテーション層から下はすべてKMPで書かれた共通コードです。<br> 逆に言うと、OS固有のコードは基本的にActivityとかViewControllerとか、View層のものだけになっています。</p><p>データ層のみKMPで共通化、とか色々共通化の度合いに選択肢はあったのですが、せっかくの新規アプリなので「KMPでどこまでできるのか」を確かめる意味合いも含めてこのような決断をしました。</p><p>色々難しい点もありましたが、共通コードの割合も前述の通りかなりいい線いってますし、結果的に良かったのではないかと考えています。</p><h3 id="viewmodelのインターフェイス" tabindex="-1">ViewModelのインターフェイス <a class="header-anchor" href="#viewmodelのインターフェイス" aria-label="Permalink to &quot;ViewModelのインターフェイス&quot;">​</a></h3><p>さて、プレゼンテーション層より下はすべて共通コード、としたことで各OS側から意識する必要のあるKMPのコードは基本的にViewModelだけにすることができました。</p><p>ではViewModelは一体どんなインターフェイスになっているのでしょうか。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MviViewModelはAndroid側ではandroidxのViewModelを継承している</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MviViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ACTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STATE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> effects: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCleared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>擬似コードですが、ざっくり上記がViewModelのインターフェイスです。</p><p>今回のアプリではプレゼンテーション層のデザインパターンとしてMVI(Model-View-Intent)を採用しています。<br> MVIについての詳細な説明は他の詳しい記事に譲りますが、下記のような特徴があります。</p><ul><li>単方向データフロー</li><li>ImmutableなState</li></ul><p>誤解を承知で大変ざっくり言ってしまうと、画面毎にReduxをする、というのが結構近い表現なのかなと思います。</p><p>よく見かけるMVIのパターンに追加して、今回のアプリでは <code>Effect</code> というものを追加しています。<br> これはToastやDialogの表示、あるいは画面遷移イベントなど、一時的なイベントをViewに通知するための仕組みです。<br> こういったイベント類をStateに含んでしまうと管理が複雑になってしまいがちなので、別物として扱っています。</p><p>上記のコードを見ていただくと、<code>Effect</code>は<code>Event</code>というクラスでラップされています。この<code>Event</code>クラスは、Android界隈でよく話題になる、<a href="https://medium.com/androiddevelopers/livedata-with-snackbar-navigation-and-other-events-the-singleliveevent-case-ac2622673150" target="_blank" rel="noreferrer"><code>SingleLiveEvent</code>問題に対応するためのクラス</a>です。</p><p>最近はStateFlowやSharedFlowが追加されこの辺の問題にも新たなアプローチが追加されそうですが、Flowを使っているからといってこの問題が100%解決できるわけではありません。そのため、本アプリでは今のところ<code>Event</code>ラッパーを利用して同じイベントが再通知されることを防いでいます。</p><p>全体的な処理の流れは下記のようになります。</p><ol><li>Viewから<code>dispatch</code>メソッドを通じてイベント(Intent)がViewModelに通知される</li><li>ViewModelは通知されたイベントをもとに対応する処理を行い、新しいStateやEffectをFlowに流す</li><li>Viewは購読しているStateやEffectのFlowから新しいState/Effectを受け取り、状態を更新する</li></ol><h4 id="iosからの使い方" tabindex="-1">iOSからの使い方 <a class="header-anchor" href="#iosからの使い方" aria-label="Permalink to &quot;iOSからの使い方&quot;">​</a></h4><p>ViewModelのインターフェイスについて解説しましたが、ViewModelからの出力はkotlinx.coroutinesのFlowになっています。<br> このFlow、iOSからはそのまま使うことができません。</p><p>そのため、下記のようなラッパークラスを用意してあげる必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewModelAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Intent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewModel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MviViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, *, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coroutineContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoroutineContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coroutineContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INTENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onStateChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">STATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            viewModel.states</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onEffectReceived</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">effect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCleared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>とまあこんな感じです。</p><h3 id="共通化できないコードを共通コードで使う" tabindex="-1">共通化できないコードを共通コードで使う <a class="header-anchor" href="#共通化できないコードを共通コードで使う" aria-label="Permalink to &quot;共通化できないコードを共通コードで使う&quot;">​</a></h3><p>各OS向けのライブラリとかOS固有の機能を共通側から使いたい場合もあります。<br> たとえばFirebaseAnalyticsなどです。</p><p>こういった場合には下記の二種類の方法が考えられます。</p><ul><li>expect/actualを使う</li><li>interfaceをKMP側で定義し、各プラットフォームで実装クラスを用意</li></ul><p>どちらでも要件は達成できますが、テスト時にモックと入れ替えたりすることを考えるとinterfaceで用意するほうが楽です。<br><a href="https://kotlinlang.org/docs/reference/mpp-connect-to-apis.html" target="_blank" rel="noreferrer">公式でもexpect/actualの利用は最小限に留めるよう推奨されている</a>ので、本アプリでもそのようにしています。</p><h3 id="利用しているkmpのライブラリ" tabindex="-1">利用しているKMPのライブラリ <a class="header-anchor" href="#利用しているkmpのライブラリ" aria-label="Permalink to &quot;利用しているKMPのライブラリ&quot;">​</a></h3><table tabindex="0"><thead><tr><th>ジャンル</th><th>ライブラリ</th></tr></thead><tbody><tr><td>DI</td><td>Kodein</td></tr><tr><td>非同期/並列処理</td><td>kotlinx.coroutines, CoroutineWorker, Stately</td></tr><tr><td>通信</td><td>Ktor, kgql(GraphQL), kotlinx.serialization</td></tr><tr><td>ローカルキャッシュ</td><td>sqldelight, multiplatform-settings</td></tr><tr><td>環境変数的なの</td><td>BuildKonfig</td></tr><tr><td>ログ</td><td>Napier</td></tr></tbody></table><h2 id="kmpのメリット" tabindex="-1">KMPのメリット <a class="header-anchor" href="#kmpのメリット" aria-label="Permalink to &quot;KMPのメリット&quot;">​</a></h2><h3 id="使い慣れた言語で書ける" tabindex="-1">使い慣れた言語で書ける <a class="header-anchor" href="#使い慣れた言語で書ける" aria-label="Permalink to &quot;使い慣れた言語で書ける&quot;">​</a></h3><p>Androidエンジニアから見たらこれがかなり大きいでしょう。<br> iOSエンジニアからすると、新言語という意味では他のクロスプラットフォームソリューションと大差ないかもしれません。SwiftとKotlinは似ているとよく言われますが、実際どうなんでしょうね。</p><h3 id="工数削減" tabindex="-1">工数削減 <a class="header-anchor" href="#工数削減" aria-label="Permalink to &quot;工数削減&quot;">​</a></h3><p>本アプリでのケースではViewModel以下がすべて共通です。そのため、Android/iOSそれぞれ別で作っている場合と比べると、ViewModel以下の作成にかける工数が単純計算で半分ですみます(個人の感想です。実際の効果を保証するものではありません)。</p><p>自分がAndroidのViewを書いている間にiOSの人が別画面のViewModelを作っていて、AndroidのViewが書き終わったと思ったらAndroid担当は自分しかいないのに次の画面のViewModelがもう完成している、ということが実際にありました。</p><p>同じコードを共有するわけですからViewのコードも似通ったものになります。相互にコードを参考にしあったり実装の相談をしたり、ということもしやすいです。</p><h3 id="用語-仕様に差が生まれない" tabindex="-1">用語/仕様に差が生まれない <a class="header-anchor" href="#用語-仕様に差が生まれない" aria-label="Permalink to &quot;用語/仕様に差が生まれない&quot;">​</a></h3><p>プレゼンテーション層が共通ですから、必然的に用語も同じになります。<br> たとえばユーザのプロフィール画面がiOSでは<code>AccountViewController</code>でAndroidでは<code>ProfileFragment</code>、とか言うことは起きないわけです。ViewModelの名前が<code>AccountViewModel</code>だったら両OSともにそれに沿った名前になります。</p><p>ビジネス的に重要な部分も共通にできるので、入力フォームのバリデーションロジックがプラットフォームで異なるとか、ログの値や名称がプラットフォームで異なる、とかいう事態も回避することができます。</p><p>アプリ開発であるあるな「え、こんな機能あったんですか、Androidでは実装してないです…」も、共通部分のコードはAndroid/iOS両方のエンジニアがレビューしているはず、という前提に立てば基本的に発生しないはずです。</p><h3 id="viewを各プラットフォームで書ける" tabindex="-1">Viewを各プラットフォームで書ける <a class="header-anchor" href="#viewを各プラットフォームで書ける" aria-label="Permalink to &quot;Viewを各プラットフォームで書ける&quot;">​</a></h3><p>これは考え方によるかもしれませんが、KMPでは基本的にViewを各プラットフォームで書くことになります。<br> そのため、各OSの特性やデザインガイドラインを意識したUIを最適な方法で作ることができます。最新OSの機能も自由に使えるはずです。</p><p>KMPでもViewを共通化したい、という場合は現状すぐれた選択肢はないのですが、将来的にはJetpack Compose(というかJetBrains版のComposeというか)が対応するかもしれません</p><h3 id="導入する範囲を選べる" tabindex="-1">導入する範囲を選べる <a class="header-anchor" href="#導入する範囲を選べる" aria-label="Permalink to &quot;導入する範囲を選べる&quot;">​</a></h3><p>これも他のクロスプラットフォームソリューションと比べたときのメリットになると思います。</p><p>本アプリではできるだけたくさんのコードを共通化することを目標に開発していましたが、もちろんプロジェクトのニーズに応じて導入する範囲を選ぶことも可能です。<br> たとえばリモートAPIクライアントだけKMPで書いてAndroid/iOS/Webフロントエンドで共有したい、とか。</p><p>KMPの成果物は、Androidからはjarやaar、iOSからはframework、JavaScriptからはnpmパッケージというように、各プラットフォームで自然に利用できる形で出力されます。<br> 使う側のコードでは特に込み入った設定は必要ないので、既存のプロジェクトでも比較的導入しやすいのではないかな、と思います。</p><h2 id="kmpのデメリット" tabindex="-1">KMPのデメリット <a class="header-anchor" href="#kmpのデメリット" aria-label="Permalink to &quot;KMPのデメリット&quot;">​</a></h2><h3 id="学習コスト" tabindex="-1">学習コスト <a class="header-anchor" href="#学習コスト" aria-label="Permalink to &quot;学習コスト&quot;">​</a></h3><p>デメリットという観点だと学習コストが一覧大きいでしょう。</p><p>まずiOSの人にKotlinを学んでもらう必要があります。</p><p>Androidエンジニアも、Kotlin普段遣いしているから楽勝、とはいきません。</p><p>Kotlin/Nativeには、マルチスレッド周りの挙動を中心に色々とKotlin/JVMとは異なる仕様がいくつかあります。<br> Androidの感覚で並列処理を書いてしまうと、iOSでクラッシュするコードになってしまうことが多々あります。<br> この特性を理解し、iOS(Kotlin/Native)で動くことをテスト等で確認しながら開発を進めていく必要があります。ちなみにiOSでちゃんと動けば基本的にAndroidでもちゃんと動きます。</p><p>日本語の資料がまだ少ない、というのも人によっては障害になるでしょう。<br> 英語の資料はそこそこありますし、Kotlin公式Slackでは活発にやり取りが行われているので、英語でのコミュケーションができれば必要な知識はだいたい揃います。<br> GitHub/YouTrackのissueを読むのも色々な不具合をしらべる有効な手立てです。</p><h3 id="kmpはまだα版" tabindex="-1">KMPはまだα版 <a class="header-anchor" href="#kmpはまだα版" aria-label="Permalink to &quot;KMPはまだα版&quot;">​</a></h3><p>NetflixやDropboxをはじめ、本番環境に導入している企業が多いので忘れてしまいがちですが、KMPはまだα版です。<br> 破壊的変更もしばしばあります。</p><p>最近だと、Kotlin 1.4.0に対応するKtorのリリースで、いきなりマルチスレッド対応版のkotlinx.coroutinesが必須になったことは記憶に新しいです。</p><p>将来的にKotlin/Nativeのメモリ管理モデルが完全にリプレースされることが予告されている点も、α版感あふれる事項です。</p><p>「なにもしてないのにIDEが真っ赤になった、よくわからないけど色々なキャッシュを全削除したら直った」みたいなこともたまに、普通のAndroid開発よりは高い頻度で発生します。</p><p>ライブラリも、ファイル操作周りをはじめ、まだ基本的なものが揃っていなかったりします。<br> まあこれは考え方によってはチャンスでもあります。<br> 競合が少ないので、自分で作ったライブラリがコミュニティのデファクト・スタンダードになれる可能性も比較的高いです。</p><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><h3 id="kmpを使ってよかったか" tabindex="-1">KMPを使ってよかったか <a class="header-anchor" href="#kmpを使ってよかったか" aria-label="Permalink to &quot;KMPを使ってよかったか&quot;">​</a></h3><p>これはYESと言い切れます。</p><p>コードの共通化を無理なく、使いやすい言語で実現することができ、工数の削減も叶いました。</p><p>既存のプロジェクトへの導入も容易ですし、ビジネスロジックのみ共有したい、という要件の場合には有効な選択肢になりうると考えています。</p><h3 id="kmpをおすすめできるか" tabindex="-1">KMPをおすすめできるか <a class="header-anchor" href="#kmpをおすすめできるか" aria-label="Permalink to &quot;KMPをおすすめできるか&quot;">​</a></h3><p>この観点では、条件付きのYESになります。</p><p>KMPの学習コストは決して低くはないです。<br> 日本語の資料もまだ少ないですし、ある程度自分で調べる力が必要です。</p><p>フレームワーク側の実装を読んだり、GitHubやYouTrackのissueを調べたり。あるいは英語の文献を読んだりKotlin Slackをはじめとした英語のコミュニティで発言をしたり。</p><p>KMPが安定してくるに従って改善していくでしょうが、現状はある程度エンジニアとしての地力が求められる環境である、と言えるでしょう。</p><p>経験の浅い人が多いチームで、しかしそれでもクロスプラットフォームで開発したい、という場合もあるかと思います。<br> そういった場合は、KMPではなくFlutterを選んだほうがいいかもしれません。</p><p>Flutterのほうが日本人のコミュニティが大きいですし、Viewまで共通で書けるため、各プラットフォームの知識はKMPほど必要ありません。</p><p>あるいはクロスプラットフォームを選択したい、という方針と真っ向から対立してしまいますが、素直にAndroid版とiOS版を個別で実装して経験を積む、という選択肢を検討してみるのもアリだと思います。<br> FlutterにしてもKMPにしても各OSの仕様を知らないと解決できない問題が存在します。要件が複雑になればなるほどそういったケースは増えてくるので、各OSの知見がチーム内に少ない状態でクロスプラットフォームを選択してしまうと、結果的に工数が増えてしまう可能性があります。</p><hr><p>以上です。</p><p>なんだかんだ色々書きましたが、私は日々KMPで開発してて大変楽しいです。</p>`,109)])])}const E=s(e,[["render",t]]);export{c as __pageData,E as default};
