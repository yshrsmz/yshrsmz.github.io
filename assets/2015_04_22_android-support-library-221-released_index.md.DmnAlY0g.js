import{_ as r,a as t,o as a,X as o}from"./chunks/framework.Cp7KI1mb.js";const s=JSON.parse('{"title":"Android Supoprt Library 22.1がリリースされたので変更点など","description":"","frontmatter":{"layout":"post","title":"Android Supoprt Library 22.1がリリースされたので変更点など","category":"programming","tags":["Android"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2015/04/22/android-support-library-221-released/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2015/04/22/android-support-library-221-released/"}],["meta",{"property":"og:title","content":"Android Supoprt Library 22.1がリリースされたので変更点など"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2015/04/22/android-support-library-221-released/ogp.png"}]]},"headers":[],"relativePath":"2015/04/22/android-support-library-221-released/index.md","filePath":"posts/2015/2015-04-22-android-support-library-221-released.md","date":{"time":"2015-04-22","string":"April 22, 2015","year":"2015","month":"04","day":"22"}}'),i={name:"2015/04/22/android-support-library-221-released/index.md"};function l(p,e,d,n,c,h){return a(),t("div",null,[...e[0]||(e[0]=[o('<p>2015/4/21、Android Support Libraryの22.1が公開されました。<br><a href="http://android-developers.blogspot.jp/2015/04/android-support-library-221.html" target="_blank" rel="noreferrer">公式ブログ</a>から変更点を抄訳してます</p><h2 id="support-v4" tabindex="-1">Support v4 <a class="header-anchor" href="#support-v4" aria-label="Permalink to &quot;Support v4&quot;">​</a></h2><ul><li><a href="http://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html" target="_blank" rel="noreferrer"><code>DrawableCompat</code></a>で、drawable tintingがAPI4以上で使用可能に <ul><li><a href="http://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html" target="_blank" rel="noreferrer"><code>DrawableCompat.wrap(Drawable)</code></a>でdrawableをラップして、<a href="http://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html#setTint(android.graphics.drawable.Drawable,%20int)" target="_blank" rel="noreferrer"><code>setTint()</code></a>, <a href="http://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html#setTintList(android.graphics.drawable.Drawable,%20android.content.res.ColorStateList)" target="_blank" rel="noreferrer"><code>setTintList()</code></a>, <a href="http://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html#setTintMode(android.graphics.drawable.Drawable,%20android.graphics.PorterDuff.Mode)" target="_blank" rel="noreferrer"><code>setTintMode()</code></a>を使おう</li></ul></li><li><a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html" target="_blank" rel="noreferrer"><code>Palette</code></a>の内部ロジックの一部を<a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html" target="_blank" rel="noreferrer"><code>ColorUtils</code></a>で公開</li><li>Lollipopで追加された、<a href="http://www.google.com/design/spec/animation/authentic-motion.html" target="_blank" rel="noreferrer">building authentic motion</a>の重要な要素のInterpolatorをSupport v4に追加 <ul><li><a href="http://developer.android.com/reference/android/support/v4/view/animation/FastOutLinearInInterpolator.html" target="_blank" rel="noreferrer"><code>FastOutLinearInInterpolator</code></a></li><li><a href="http://developer.android.com/reference/android/support/v4/view/animation/FastOutSlowInInterpolator.html" target="_blank" rel="noreferrer"><code>FastOutSlowInInterpolator</code></a></li><li><a href="http://developer.android.com/reference/android/support/v4/view/animation/LinearOutSlowInInterpolator.html" target="_blank" rel="noreferrer"><code>LinearOutSlowInInterpolator</code></a></li></ul></li><li><a href="http://developer.android.com/reference/android/support/v4/view/animation/PathInterpolatorCompat.html" target="_blank" rel="noreferrer"><code>PathInterpolatorCompat</code></a>を追加</li><li><a href="http://developer.android.com/reference/android/support/v4/widget/Space.html" target="_blank" rel="noreferrer"><code>Space</code></a> WidgetをGridLayout LibraryからSupport v4に移動</li></ul><h2 id="appcompat" tabindex="-1">AppCompat <a class="header-anchor" href="#appcompat" aria-label="Permalink to &quot;AppCompat&quot;">​</a></h2><ul><li><code>ActionBarActivity</code>がDeprecatedに</li><li>代わりに<a href="http://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html" target="_blank" rel="noreferrer"><code>AppCompatActivity</code></a>を使うこと</li><li><code>AppCompatActivity</code>の内部ロジックは<a href="http://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html" target="_blank" rel="noreferrer"><code>AppCompatDelegate</code></a>を通じてどんなActivityでも使える <ul><li>ライフサイクルメソッド</li><li>テーマ</li><li>color tinting</li><li>etc...</li><li>もう<code>ActionBarActivity/AppCompatActivity</code>を継承する必要はない！(<code>AppCompatActivity</code>使うのが一番簡単なことに変わりはないけど)</li></ul></li><li>マテリアルデザインに対応した、<a href="http://developer.android.com/reference/android/support/v7/app/AppCompatDialog.html" target="_blank" rel="noreferrer"><code>AppCompatDialog</code></a>の追加</li><li><code>AlertDialog</code>と同じAPIの<a href="http://developer.android.com/reference/android/support/v7/app/AlertDialog.html" target="_blank" rel="noreferrer"><code>support.v7.app.AlertDialog</code></a>も追加(<code>AppCompatDialog</code>の機能を含む)</li><li>WidgetのColorTintingは、下記のWidgetを使うことでレイアウトのinflate時に自動的に行われる。既存のものと置き換えて使おう <ul><li><code>AppCompatAutoCompleteTextView</code></li><li><code>AppCompatButton</code></li><li><code>AppCompatCheckBox</code></li><li><code>AppCompatCheckedTextView</code></li><li><code>AppCompatEditText</code></li><li><code>AppCompatMultiAutoCompleteTextView</code></li><li><code>AppCompatRadioButton</code></li><li><code>AppCompatRatingBar</code></li><li><code>AppCompatSpinner</code></li><li><code>AppCompatTextView</code></li></ul></li><li>API11以上で、各Viewに対して<code>android:theme</code>が使用可能に(<code>app:theme</code>はdeprecated)</li></ul><h2 id="leanback" tabindex="-1">Leanback <a class="header-anchor" href="#leanback" aria-label="Permalink to &quot;Leanback&quot;">​</a></h2><p>(触ってないからよくわからん…)</p><ul><li>よりよい10インチ端末サポート</li><li>新しいガイドステップ機能のサンプル</li><li>たくさんのBugfix!</li></ul><h2 id="recyclerview" tabindex="-1">RecyclerView <a class="header-anchor" href="#recyclerview" aria-label="Permalink to &quot;RecyclerView&quot;">​</a></h2><ul><li>新しいデータ構造<a href="http://developer.android.com/reference/android/support/v7/util/SortedList.html" target="_blank" rel="noreferrer"><code>SortedList</code></a><ul><li>ソートされたデータの管理が簡便に</li><li>バッチ処理できる</li></ul></li></ul><h2 id="palette" tabindex="-1">Palette <a class="header-anchor" href="#palette" aria-label="Permalink to &quot;Palette&quot;">​</a></h2><ul><li>パフォーマンスの向上。クオリティを指定しなくても6-8倍速くなった</li><li>Builderパターンで初期化。<code>Palette.generate(Bitmap)</code>じゃなくて<a href="http://developer.android.com/reference/android/support/v7/graphics/Palette.html" target="_blank" rel="noreferrer"><code>Palette.from(Bitmap)</code></a>を使って<a href="http://developer.android.com/reference/android/support/v7/graphics/Palette.Builder.html" target="_blank" rel="noreferrer"><code>Palette.Builder</code></a>を取得してね</li></ul><h2 id="renderscript" tabindex="-1">RenderScript <a class="header-anchor" href="#renderscript" aria-label="Permalink to &quot;RenderScript&quot;">​</a></h2><ul><li>信頼性とパフォーマンスの向上</li><li>ネイティブのRenderScriptが使えるか、の判定アルゴリズムの改善</li><li><a href="http://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicHistogram.html" target="_blank" rel="noreferrer"><code>ScriptIntrinsicHistogram</code></a>と<a href="http://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicResize.html" target="_blank" rel="noreferrer"><code>ScriptIntrinsicResize</code></a>の追加</li></ul><hr><p>だいたいこんな感じです。</p><p>ActionBarActivityがDeprecatedになったのが個人的には一番驚きました。<br> Toolbarのサポートをしたり、名前と実態に齟齬が生まれてるのが理由だそうです。</p><p>AppCompatがだいぶ充実したようなので、アプリのマテリアルデザイン対応が捗りそうですね</p><p>*<a href="http://qiita.com/yshrsmz@github/items/afac02fad7d54e8dca3b" target="_blank" rel="noreferrer">一応qiitaにも</a></p>',19)])])}const u=r(i,[["render",l]]);export{s as __pageData,u as default};
