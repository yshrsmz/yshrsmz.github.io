import{_ as a,a as t,o as r,X as o}from"./chunks/framework.Cp7KI1mb.js";const m=JSON.parse('{"title":"2015年振り返りと2016年について","description":"","frontmatter":{"layout":"post","title":"2015年振り返りと2016年について","category":"diary","tags":["diary"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2016/01/09/lookingback2015/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2016/01/09/lookingback2015/"}],["meta",{"property":"og:title","content":"2015年振り返りと2016年について"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2016/01/09/lookingback2015/ogp.png"}]]},"headers":[],"relativePath":"2016/01/09/lookingback2015/index.md","filePath":"posts/2016/2016-01-09-lookingback2015.md","date":{"time":"2016-01-09","string":"January 9, 2016","year":"2016","month":"01","day":"09"}}'),i={name:"2016/01/09/lookingback2015/index.md"};function n(l,e,h,p,d,c){return r(),t("div",null,[...e[0]||(e[0]=[o('<p>年も変わってしまいましたが2015年の振り返りなどやってみます。</p><h2 id="仕事" tabindex="-1">仕事 <a class="header-anchor" href="#仕事" aria-label="Permalink to &quot;仕事&quot;">​</a></h2><p>始めてAndroidエンジニアとして参加したプロジェクトがクローズ(というか開発なし現状維持運用)して、別のプロジェクトに移った。Androidやりたいよーって言ってたらWebフロントエンドで配属された。まったく納得できなかったけど、いろいろあって数ヶ月でAndroid開発に戻ったのでまあ良かったかな、という感じ。</p><p>とはいえ、数ヶ月だけやっていたWebフロントエンド作業の中でReactとかElectronとか最近流行りの技術に触れ、個人プロダクトのOmnitweety for Chromeに還元したりできたので結果的に良かったとは思う。あと静的サイトジェネレータ系検討してる人、Hexoだけは使うなよ、絶対だ。</p><h2 id="個人開発" tabindex="-1">個人開発 <a class="header-anchor" href="#個人開発" aria-label="Permalink to &quot;個人開発&quot;">​</a></h2><p>毎年OSS活動したいなーとか個人でもアプリ開発したいなー、とか思いながら活動できてなかったんだけど、今年はいろいろできたと思う。全体的なGithubでのアクティビティは<a href="https://github.com/yshrsmz?tab=repositories" target="_blank" rel="noreferrer">こちら</a>で確認してもらうとして、主だったところは下記三点</p><ul><li><p><a href="https://github.com/yshrsmz/omnitweety" target="_blank" rel="noreferrer">Omnitweety for Chrome</a><br> ChromeのOmniboxからツイート・URLをシェアできるツイート専用Twitterクライアント。ブログエントリは<a href="/2015/09/10/omnitweety-tweet-from-chrome-omnibox/">こちら</a></p></li><li><p><a href="https://github.com/yshrsmz/photosearcher" target="_blank" rel="noreferrer">画像検索してファボるやつ</a><br> FabricのTwitter Kitを試してみたくて作ったAndroidアプリ。画像を検索してひたすらファボるアプリ欲しかった、というのもある。ブログエントリは<a href="/2015/09/12/app-created-during-summer-vacation/">こちら</a></p></li><li><p><a href="https://play.google.com/store/apps/details?id=net.yslibrary.omnitweety" target="_blank" rel="noreferrer">Omnitweety for Android</a><br> 初めて個人でGooglePlayに公開したアプリ。名前からわかるようにOmnitweety for ChromeをAndroidに移植したような機能。ブラウザからURLをTwitterに共有することに特化している。おかげ様で国内外のいろいろなブログで紹介してもらえて、結構テンション上がりました。ありがとうございます。ブログエントリは<a href="/2015/11/10/omnitweety-andrid-released-share-url-twitter/">こちら</a></p></li></ul><p>個人で開発してると、業務で使ってないライブラリやデザインパターン試せて、いろいろ知見たまってよい。作ったものをGithubで公開して星集まると承認欲求満たされるし</p><h2 id="アツかったライブラリとか技術トレンドとか" tabindex="-1">アツかったライブラリとか技術トレンドとか <a class="header-anchor" href="#アツかったライブラリとか技術トレンドとか" aria-label="Permalink to &quot;アツかったライブラリとか技術トレンドとか&quot;">​</a></h2><h3 id="realm" tabindex="-1">Realm <a class="header-anchor" href="#realm" aria-label="Permalink to &quot;Realm&quot;">​</a></h3><p>iOS/Androidで使えるSQLiteの代替DB。<br> Android版はこの一年で非同期クエリが使えるようになったりRxJavaがサポートされたり、かなり使いやすくなってきている。</p><p>ここ半年くらいGithubのissueをwatchしてるんだけど、Realmのチームは上がってきたissueに対するサポートが厚くて、ホントすごいと思う。ちょっと調べればわかるじゃん？って質問とかこれむしろRealmじゃなくてAndroidフレームワークに関する質問じゃん…ってissueにも丁寧に(そして迅速に)コメント返してる。</p><p>今後もスレッド間通信の件とかRobolectricのサポートとかいろいろ機能追加が待ってそうなので、引き続きwatchしつつ活用していこうと思う。</p><h3 id="rxjava" tabindex="-1">RxJava <a class="header-anchor" href="#rxjava" aria-label="Permalink to &quot;RxJava&quot;">​</a></h3><p>リスト操作とか非同期処理がいい感じに書けるやつ。</p><p>いろいろなオペレータがあってどれを使ったらいいかわからなくなりがちだけど、<a href="http://reactivex.io/documentation/operators.html#tree" target="_blank" rel="noreferrer">公式にチャート的なやつが用意してある</a>ので、それ見ると大体やりたいことに合ったオペレータが見つかることを9月くらいに知って、それからは <code>map</code> や <code>flatMap</code> 以外のオペレータも使えるようになってきた。</p><p>とはいえまだまだ知らないオペレータばかりなのでいろいろ書きつつ試していきたい。</p><h3 id="dagger2" tabindex="-1">Dagger2 <a class="header-anchor" href="#dagger2" aria-label="Permalink to &quot;Dagger2&quot;">​</a></h3><p>DIライブラリ。</p><p>Componentの書き方はベストプラクティスが掴みきれてないけど、最近はApplicationレベルのComponentを一つとActivity毎にComponentを一つ作る形に落ち着いている。ViewやFragmentにはActivityのComponentから依存関係を注入している。</p><p>ただ、後述するMVPアーキテクチャを採用したアプリだと、このComponentの分割方法だとConfiguration ChangeでPresenterが再生成されてしまう、という課題がある。今年はこの辺りのうまいやり方も模索しようと考えている。</p><h3 id="clean-architecture-mvp" tabindex="-1">Clean Architecture/MVP <a class="header-anchor" href="#clean-architecture-mvp" aria-label="Permalink to &quot;Clean Architecture/MVP&quot;">​</a></h3><p>Viewからロジックを分離しよう、時代はMVP/MVVMだ！　という記事を結構見かけた一年だったように感じる(私のアーキテクチャ系トピックに関する情報感度が上がってるだけかもしれないけど)。Androidの標準ライブラリとしてDataBindingが追加されたのも大きいんだろう。</p><p>Omnitweety for Androidは<a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank" rel="noreferrer">Clean Architecture</a>で実装してみて、なかなかメンテのしやすいコードになったんじゃないかなー、と自負している。</p><p>これはMVPと言うよりはClean Architectureのメリットだけど、Modelにあたる部分がデータ取得・保存クラスとドメインロジックを適用するユースケースクラスに分かれてて、かつユースケースクラスはその名の通りそれぞれ一つのユースケースロジックを実装しているだけなので、機能追加や修正時に他のユースケースに与える影響が非常に少なくすむ。</p><p>ただ、ユースケースの数だけクラスが増えるので全体的なメソッド数は膨れ上がるしboilerplateなコードも増えるので、そのまんま適用するんじゃなくてうまい落とし所を見つけたい。</p><p>MVPはViewがシンプルになってとてもいいです。 MVP過激派はPresenterにAndroid固有クラス持ち込むな！っていうけどRobolectricあるし、Bundleとか入るくらいならいいんかなーって最近は思ってます。</p><p>Android固有のクラスを持ち込まない、となると必然的にView側にある程度ロジック残っちゃうのでどう処理するのがいいんだろう…っていうのが最近の懸案事項。あとResourcesどうしたらいいの。getString()とか…</p><h2 id="_2016年やりたいこと" tabindex="-1">2016年やりたいこと <a class="header-anchor" href="#_2016年やりたいこと" aria-label="Permalink to &quot;2016年やりたいこと&quot;">​</a></h2><h3 id="テスト" tabindex="-1">テスト <a class="header-anchor" href="#テスト" aria-label="Permalink to &quot;テスト&quot;">​</a></h3><p>いい加減まじめに書く。MVPだと単体テストしやすいので、Robolectricも使っていい感じに。</p><h3 id="databinding" tabindex="-1">DataBinding <a class="header-anchor" href="#databinding" aria-label="Permalink to &quot;DataBinding&quot;">​</a></h3><p>xmlにロジック書くのもあれだし、かと言ってButterKnifeの代替としてだけ使うのはもったいないし…</p><h3 id="kolin" tabindex="-1">Kolin <a class="header-anchor" href="#kolin" aria-label="Permalink to &quot;Kolin&quot;">​</a></h3><p>今年はKotlinでアプリ書くぞ</p><h3 id="アプリ" tabindex="-1">アプリ <a class="header-anchor" href="#アプリ" aria-label="Permalink to &quot;アプリ&quot;">​</a></h3><p>二本くらいリリースする</p><p>今年もよろしくお願いします。</p>',38)])])}const b=a(i,[["render",n]]);export{m as __pageData,b as default};
