import{_ as i,a,o as n,X as t}from"./chunks/framework.Cp7KI1mb.js";const y=JSON.parse('{"title":"Fastify のサーバーを起動せずに OpenAPI ドキュメントを出力する","description":"","frontmatter":{"layout":"post","title":"Fastify のサーバーを起動せずに OpenAPI ドキュメントを出力する","category":"diary","tags":["TIL","Fastify","Node.js"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2024/12/07/fastify-openapi-without-server/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2024/12/07/fastify-openapi-without-server/"}],["meta",{"property":"og:title","content":"Fastify のサーバーを起動せずに OpenAPI ドキュメントを出力する"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2024/12/07/fastify-openapi-without-server/ogp.png"}]]},"headers":[],"relativePath":"2024/12/07/fastify-openapi-without-server/index.md","filePath":"posts/2024/2024-12-07-fastify-openapi-without-server.md","date":{"time":"2024-12-07","string":"December 7, 2024","year":"2024","month":"12","day":"07"}}'),p={name:"2024/12/07/fastify-openapi-without-server/index.md"};function e(h,s,l,k,r,E){return n(),a("div",null,[...s[0]||(s[0]=[t(`<p><code>@fastify/swagger</code> で OpenAPI ドキュメントを自動生成しているとき、サーバー起動せずに OpenAPI ドキュメントを出力しよう</p><p><strong>目次</strong></p><nav class="table-of-contents"><ul><li><a href="#tl-dr">TL;DR</a></li><li><a href="#くわしく">くわしく</a><ul><li><a href="#なぜ">なぜ</a></li><li><a href="#どうやって">どうやって</a></li></ul></li></ul></nav><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><p>テスト用の <code>fastify.inject()</code> API を使いましょう。</p><h2 id="くわしく" tabindex="-1">くわしく <a class="header-anchor" href="#くわしく" aria-label="Permalink to &quot;くわしく&quot;">​</a></h2><h3 id="なぜ" tabindex="-1">なぜ <a class="header-anchor" href="#なぜ" aria-label="Permalink to &quot;なぜ&quot;">​</a></h3><p>今開発してるサービスでは、API サーバーに Fastify を採用し、 <code>@fastify/swagger</code> で OpenAPI ドキュメントを自動生成している。当然フロントエンドもあって、そちらでは <a href="https://openapi-ts.dev/" target="_blank" rel="noreferrer">OpenAPI TypeScript</a> を利用し、API サーバーの OpenAPI ドキュメントから型を生成している。</p><p>ここで問題になるのは、API サーバーの OpenAPI ドキュメントが、サーバーを起動しているときしかアクセスできない、ということだ。</p><p>ローカルでの開発中は API サーバーを起動しているから、起動中のサーバーが提供する OpenAPI ドキュメントを利用して、型を生成できる。しかし、型生成を個々人のローカル環境のみで行うのは少々リスクがある。生成された型が最新のコミットを反映したものであること、そしてその最新の型に即した実装が行われていることが担保されないからだ。ひょっとしたら型の生成やコミットを忘れる可能性があるかもしれない。リモートの更新を pull したときに、型の更新を忘れる可能性もある。</p><p>こういったちょっとしたミスを防ぐためには型生成の自動化が必要だ。自動化は例えば Git の pre-commit フックを使う方法や、CI などがある。しかし pre-commit の度にローカルでサーバーを起動したり、CI 上でサーバーを起動するのはなかなかコストが大きい。サーバーの実装によっては DB やサードパーティの API が必要になる可能性もある。</p><p>そこで、どうにかしてサーバー全体を起動せずに OpenAPI ドキュメントを取得できないかなあ、という話になるわけだ。</p><h3 id="どうやって" tabindex="-1">どうやって <a class="header-anchor" href="#どうやって" aria-label="Permalink to &quot;どうやって&quot;">​</a></h3><p>(冒頭にも書いたけど)結論から言うと、 <a href="https://fastify.dev/docs/v1.14.x/Documentation/Testing/" target="_blank" rel="noreferrer"><code>fastify.inject()</code></a> メソッドを使うとこれが実現できる。</p><p>このメソッドを使うと、<code>fastify.ready()</code> や <code>fastify.listen()</code> を呼ばずとも(つまりサーバーを起動せずとも)、リクエストを投げレスポンスを取得することができる。 なので、<code>@fastify/swagger</code> に必要な実装(主にルート周り)だけあれば OpenAPI ドキュメントが生成できてしまう。ルート周りの処理で DB が必要になるじゃん、という話もあるが、必要なのは各ルートで定義する <code>schema</code> だけなので、 <code>fastify.inject()</code> でそのルートにアクセスしなければルートのハンドラが呼ばれることはない。プラグインや DI でうまいことモジュラーな実装にしてあれば、DB コネクション周りを管理するプラグインを <code>register</code> しない、ということもできるはず。</p><p>OpenAPI TypeScript は CLI だけでなくコードから呼ぶための API もあるので、下記のように <code>fastify.inject()</code> で取得した OpenAPI ドキュメントをもとに OpenAPI TypeScript で型生成する、というコードが書ける。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:path&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastifySwaggerPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@fastify/swagger&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Fastify </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fastify&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openapiTS, { astToString, COMMENT_HEADER } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;openapi-typescript&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateOpenAPITypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Fastify 準備</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fastify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fastify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastify,.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fastifySwaggerPlugin, { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* @fastify/swagger の設定 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // YAML フォーマットの OpenAPI ドキュメントを出力するエンドポイント</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/openapi.yml&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swagger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ yaml: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 各種ルートを登録するプラグイン(本番アプリと実装を共通化するためプラグイン化している)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(routesPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // OpenAPI ドキュメントの取得。body が yaml</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/openapi.yml&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // OpenAPI TypeScript で型生成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openapiTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body, { alphabetize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> astToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imprt.meta.dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;openapi.d.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    COMMENT_HEADER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>こんな感じ。</p><p>これを pre-commit フックで実行してもいいし、CI で実行して自動コミットしてもいい。</p>`,19)])])}const g=i(p,[["render",e]]);export{y as __pageData,g as default};
