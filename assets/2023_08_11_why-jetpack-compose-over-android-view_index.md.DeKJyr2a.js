import{_ as i,a as l,o as t,X as o}from"./chunks/framework.Cp7KI1mb.js";const u=JSON.parse('{"title":"(TBD) Jetpack Compose ではなく Android View で書いた方が実装早くすみませんか？　と言われたときに考えること","description":"","frontmatter":{"layout":"post","title":"(TBD) Jetpack Compose ではなく Android View で書いた方が実装早くすみませんか？　と言われたときに考えること","category":"programming","tags":["Android","Jetpack Compose"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2023/08/11/why-jetpack-compose-over-android-view/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2023/08/11/why-jetpack-compose-over-android-view/"}],["meta",{"property":"og:title","content":"(TBD) Jetpack Compose ではなく Android View で書いた方が実装早くすみませんか？　と言われたときに考えること"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2023/08/11/why-jetpack-compose-over-android-view/ogp.png"}]]},"headers":[],"relativePath":"2023/08/11/why-jetpack-compose-over-android-view/index.md","filePath":"posts/2023/2023-08-11-why-jetpack-compose-over-android-view.md","date":{"time":"2023-08-11","string":"August 11, 2023","year":"2023","month":"08","day":"11"}}'),r={name:"2023/08/11/why-jetpack-compose-over-android-view/index.md"};function p(a,e,n,s,c,d){return t(),l("div",null,[...e[0]||(e[0]=[o('<p>「一旦 Android View で組んであとから Jetpack Compose 化したらどうですか？　最初から Jetpack Compose でやる必要なくないですか？」</p><p>と言われたときどうしよう案件</p><p>オチはない</p><p>基本的に説得材料集めるために書いてるので視点は偏っているし、裏付けがあるわけでない内容もあるので話半分で眺めてね</p><hr><ul><li>これ読んで <ul><li><a href="https://developer.android.com/jetpack/compose/why-adopt" target="_blank" rel="noreferrer">Why Compose - Jetpack Compose - Android Developers</a></li></ul></li><li>Google が時期主力 UI 開発ツールキットとして移行を推奨している <ul><li>開発リソースは Jetpack Compose へ寄っていくことが予想できる</li></ul></li><li>故に Android View はそのうちメンテナンスモードになる <ul><li><a href="https://twitter.com/JimSproch/status/1394978976700018690?s=20" target="_blank" rel="noreferrer">https://twitter.com/JimSproch/status/1394978976700018690?s=20</a><ul><li>もうメンテナンスモード入ってるぽい？<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Androidビューはメンテナンスモードです。 相互運用性レイヤーとして引き続きサポートしますが、すべての新しい開発とバグ修正はJetpackComposeに組み込まれます。 Composeは、Androidの未来の最新UIツールキットです。</p>— Jim Sproch (@JimSproch) <a href="https://twitter.com/JimSproch/status/1394978976700018690?ref_src=twsrc%5Etfw">May 19, 2021</a></blockquote></li><li>Jim Sproch 氏は Jetpack Compose 生みの親</li></ul></li><li>新機能の追加は限定的になっていく</li><li>直接 Android View の話ではないが、 DataBinding(と ViewBinding) はメンテナンスモードへの移行がアナウンスされている <ul><li><a href="https://issuetracker.google.com/issues/173030256" target="_blank" rel="noreferrer">https://issuetracker.google.com/issues/173030256</a></li><li>これは DataBinding の依存する kapt がメンテナンスモードに入っているから</li><li>kapt 後継の ksp に対応する予定はない</li><li>kapt は Kotlin 2.0 で正式導入される K2 Compiler では現状サポートされていない <ul><li>kapt サポートの予定自体はありそう <ul><li><a href="https://slack-chats.kotlinlang.org/t/9019545/new-kotlin-intensifies-purple-party-parrot-mega-kotlin-1-8-2" target="_blank" rel="noreferrer">https://slack-chats.kotlinlang.org/t/9019545/new-kotlin-intensifies-purple-party-parrot-mega-kotlin-1-8-2</a></li></ul></li></ul></li><li>Jetpack Compose への移行が推奨されている</li><li>実際に使えなくなることはそうないと思うが、これがなくなると Android View での開発は片腕をもがれたような状態になる <ul><li>なにかのタイミングで deprecated されるかもしれないものに依存して開発を続けるのか？</li></ul></li></ul></li></ul></li><li>Jetpack Compose は OS に組み込まれておらず、独立したライブラリ(群)として提供されている <ul><li>Android View と異なり、クライアント OS のバージョンに関わらず最新の機能が使える <ul><li>不具合修正も同様に、アプリ側でライブラリの更新をすれば取り込める</li></ul></li></ul></li><li>最近(といってもだいぶ昔からだけど)のトレンドである宣言的プログラミングを採用している <ul><li>UI 定義とふるまいの定義が同じ場所にあるから、ファイルを行ったり来たりする無駄がない</li></ul></li><li>Android View よりもテストが書きやすい <ul><li>要出典</li><li>Android View と異なりすべてが関数なので、input/output が明確でセットアップし易いのは確実</li><li>VRT(画像回帰テスト) もやりやすい</li><li><a href="https://note.com/cyberz_cto/n/n26f535d6c575" target="_blank" rel="noreferrer">良いコードとは何か - エンジニア新卒研修 スライド公開｜CyberZ Developer</a></li><li>テストが書きやすいということは自動テストで担保できる範囲が広がるので、品質を担保しつつ flaky で時間のかかる手動テストを減らせる、ということ</li></ul></li><li>コードが少なくてすむ <ul><li>顕著なのは RecyclerView</li></ul></li><li>Android View の方が実装速度はやい？ <ul><li>そんなことはない</li><li>しかし習熟度の関係で一時的に Android View で作ったほうが早い、と思われる場面はありそう <ul><li>書き直す時間まで考えると倍になる</li><li>正直「書き直す時間がもらえるだろう」と確信できる信頼関係があるなら(あるいはいスケジュールに組み込んでもらえてるなら)、 Android View で書いちゃってもいいんでないの、とは思う</li></ul></li><li>Jetpack Compose は拡張性を念頭に作られているので、カスタムコンポーネントは作成しやすい</li><li>Android View ではめんどくさくて諦めていたテストも書いているから、ちょっと時間はかかってるかもしれないがトータルで品質は上がっている説 <ul><li>テスト書いてる場合に限る <ul><li>-&gt; <strong>というかテスト書きましょう</strong></li></ul></li></ul></li></ul></li><li>ビルドがはやい</li><li>アプリサイズが小さくなる</li><li>新技術へのモチベーションで効率アップ</li><li>そもそも「あとから Jetpack Compose 化」する機会は訪れるのか</li></ul><hr><p>基本的に</p><ul><li>今コストかかってるかもしれないが、長いスパンで見ると品質や開発速度は上がってますよ</li><li>そもそも「(習熟度の問題があるから) Android View のほうが早く実装できますよ」は幻想</li><li>Jetpack Compose で書くと技術広報や採用でもアピールできますよ</li><li>価値観が合わないので転職しますね <ul><li>実際タイトルのようなことを言われてモヤッと/イラッとした、ということは良好な信頼関係気づけてない説ありません？</li></ul></li></ul><p>みたいな選択肢になるんじゃない(暴言がすぎる)</p>',10)])])}const w=i(r,[["render",p]]);export{u as __pageData,w as default};
