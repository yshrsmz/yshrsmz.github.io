import{_ as a,a as e,o as t,X as s}from"./chunks/framework.Cp7KI1mb.js";const k=JSON.parse('{"title":"Kotlin Multiplatform Projectで考えることいろいろ","description":"","frontmatter":{"layout":"post","title":"Kotlin Multiplatform Projectで考えることいろいろ","category":"programming","tags":["kotlin","kmp"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2019/04/16/thoughts-on-kotlin-mpp/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2019/04/16/thoughts-on-kotlin-mpp/"}],["meta",{"property":"og:title","content":"Kotlin Multiplatform Projectで考えることいろいろ"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2019/04/16/thoughts-on-kotlin-mpp/ogp.png"}]]},"headers":[],"relativePath":"2019/04/16/thoughts-on-kotlin-mpp/index.md","filePath":"posts/2019/2019-04-16-thoughts-on-kotlin-mpp.md","date":{"time":"2019-04-16","string":"April 16, 2019","year":"2019","month":"04","day":"16"}}'),n={name:"2019/04/16/thoughts-on-kotlin-mpp/index.md"};function l(o,i,r,p,h,c){return t(),e("div",null,[...i[0]||(i[0]=[s(`<p>グダグダ書くよ</p><hr><p>Android/iOSアプリをKotlin Multiplatform Projectで作るのにいい感じのアーキテクチャをいろいろ試行錯誤している。</p><p>Kotlin Multiplatform Projectでアプリを作るにあたって、単純にAndroidアプリを作るようにはいかないところがいくつかあるので、なかなかおもしろい。 その&quot;おもしろい&quot;点というのは、たとえば下記のような点だ。</p><ul><li>Kotlin Multiplatform ProjectではRxが使えない</li><li>LiveDataもAndroid Specificなので使えない</li><li>非同期は基本Coroutinesでやる必要がある</li><li>CoroutinesはSwiftから使えない</li><li>Kotlin/Nativeでは<code>freezing</code>というランタイムの特性があり、変更可能なデータがスレッドをまたげない</li></ul><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><ul><li>筆者はMVI(Model - View - Intent)推し</li><li>Clean Architectureぽい階層型のアーキテクチャを採用している</li></ul><h2 id="非同期" tabindex="-1">非同期 <a class="header-anchor" href="#非同期" aria-label="Permalink to &quot;非同期&quot;">​</a></h2><p>最初の３つはまあ言いたいことは同じで、つまりリアクティブを実現するための仕組みがKotln Coroutinesしかない、ということだ。<br> データのストリームは基本的にKotlin CoroutinesのChannelを利用して表現することになりそう。<br> Flowというコールドストリームの実装が1.3.30で来たけど、ViewModelから公開するStateのストリームにはChannelのほうが相性は良さそう。<br> ユースケースとかデータ層とか、場所によっては使えそう。このへんの使い分けはRxJavaのSubject/Observableと変わらない。<br> ChannelをFlowに変換していろいろなオペレータで加工する、というのは勿論ありうるしようやくRx的なことができるようになって嬉しい限り。</p><p><code>LiveData</code>は最近更新が途絶えてるけど<a href="https://github.com/florent37/Multiplatform-LiveData" target="_blank" rel="noreferrer">Multiplatform対応のライブラリがある</a>ので、それを更新すればいけなくもない。<br> とはいえKotlin Coroutinesがかなり充実してきているのでわざわざ使う必要もなさそう。</p><p>AndroidではActivity/Fragmentで<a href="/2019/04/04/kotlin-channel-and-android-lifecycle/">ChannelをLiveDataに変換してあげる</a>とちょっと扱いやすくなるかもしれない。<br> 最近はAndroid JetpackのCoroutinesサポートが充実してきたのであんま必要ないかも。</p><h2 id="coroutinesとswift" tabindex="-1">CoroutinesとSwift <a class="header-anchor" href="#coroutinesとswift" aria-label="Permalink to &quot;CoroutinesとSwift&quot;">​</a></h2><p>ただCoroutinesはSwiftから直接呼べないので、コールバック形式に変換してあげる必要がある。<br> あるいは、<code>CoroutineScope</code>を実装したアダプタのようなものを作ってあげるのもいいかもしれない。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>たとえば上記のような<code>ViewModel</code>があったとして、この<code>val states: Channel&lt;State&gt;</code>はSwift側からは普通に触ることはできない。<br> そこで下記のようなクラスを用意する。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StateListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoroutineContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coroutineContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SupervisorJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listenToStateUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewModel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, callback: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      viewModel.states.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これをSwiftで書かれた<code>ViewController</code>で使えば、<code>ViewModel</code>のI/Fを変えないまま使い回すことができる。<br><code>ViewModel</code>も<code>StateListener</code>も<code>CoroutineScope</code>を実装しているので、適当なタイミングで<code>CoroutineScope#cancel()</code>を呼んであげればライフサイクル的な問題もないはず。<br> ただこれは基本的にただのリスナですよー、って認識を徹底してここにiOS固有のロジックを書かないようにしたほうがいい。</p><p>あと、Kotlin/Nativeではジェネリクスが使えない(使えるけど、Kotlin外から見るとAnyになってしまう)ので、このリスナクラスは<code>ViewModel</code>ごとに作ってあげる必要がある。<br> Objective-Cヘッダのジェネリクスまわりは<a href="https://github.com/JetBrains/kotlin-native/pull/2850" target="_blank" rel="noreferrer">1.3.40から改善しそう</a>なので期待。</p><p>ちなみにKotlin/Native上のCorutinesはメインスレッドしかサポートしてないので注意が必要。<br> commonコードでAndroidの<code>Dispatchers.IO</code>とか意識したい場合は、下記の用に<code>expect - actual</code>で書き分けたらよい。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// common</span></span>
<span class="line"><span>expect val mainContext: CoroutineContext</span></span>
<span class="line"><span>expect val backgroundContext: CoroutineContext</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>// android</span></span>
<span class="line"><span>actual val mainContext: CoroutineContext = Dispatchers.Main</span></span>
<span class="line"><span>actual val backgroundContext: CoroutineContext = Dispatchers.IO</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ios. 自分で用意したメインスレッド用のDispatcherを使う</span></span>
<span class="line"><span>actual val mainContext: CoroutineContext = ApplicationDispatcher</span></span>
<span class="line"><span>actual val backgroundContext: CoroutineContext = ApplicationDispatcher</span></span></code></pre></div><h2 id="freezing" tabindex="-1">freezing <a class="header-anchor" href="#freezing" aria-label="Permalink to &quot;freezing&quot;">​</a></h2><p>Kotlin/Nativeでは<a href="https://github.com/JetBrains/kotlin-native/blob/master/CONCURRENCY.md" target="_blank" rel="noreferrer">Concurrencyのモデル</a>がJVMとはかなり異なっている。<br><code>Worker</code>というAPIを使えば並列処理はできるけど、そもそもKotlin/NativeにしかないAPIなのでKMPでcommonコードから扱いたいときは各プラットフォーム用の抽象化が難しい。</p><p>また、Workerとメインスレッドでオブジェクトをやり取りする際はオブジェクトを<code>freeze</code>しなければならない。<code>freeze</code>したオブジェクトは変更不可能になり、<code>var</code>で宣言した値でも再アサインしようとすると<code>InvalidMutabilityException</code>が投げられる(そう、ランタイムの特性なのだ！)。<br> また、<code>freeze</code>されたオブジェクトを参照してたり参照したりしてるオブジェクト(オブジェクトのサブグラフ)も<code>freeze</code>されるのでよくわからないことになる。<br> AtomicReference系の一部クラスを使うこともできるけど非常に限られたAPIで、無理をして実装するよりは新しいパラダイムになれたほうがよさそう。</p><p>ちなみに<code>freeze</code>されたコールバックのラムダ式とかからCoroutinesを使おうとすると、マルチスレッド対応してないので前述の<code>InvalidMutabilityException</code>を投げて死ぬ。</p><p>コールバックをサブグラフに注意しつつThreadLocalで保持して、<code>freeze</code>されたラムダ内からメインスレッドに戻した後に呼ぶ、とか回りくどいことをやれば一応回避はできる。できるけどメインスレッドには戻ってしまう。</p><p>詳しくは文末の参考資料に挙げた記事を読んでみてほしい。<br><a href="https://github.com/touchlab/DroidconKotlin/" target="_blank" rel="noreferrer">touchlab/DroidconKotlin</a>が実装としては参考になる。</p><p>ちなみにKotlin Multiplatform対応のSQLIte3ラッパー<a href="https://github.com/square/sqldelight" target="_blank" rel="noreferrer">square/sqldelight</a>のクエリリスナは<code>freeze</code>されるので、この辺の考慮が必要。</p><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><ul><li>リアクティブプログラミングはKotlin CoroutinesのChannel/Flowを使って実現</li><li>Swiftから使うときはコールバック形式に変換するかアダプタを作ってあげる</li><li><code>freezing</code>厄介</li></ul><p>実際に採用したアーキテクチャについてはまた後ほど詳しく書くかも。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://github.com/JetBrains/kotlin-native/blob/master/CONCURRENCY.md" target="_blank" rel="noreferrer">kotlin-native/CONCURRENCY.md at master · JetBrains/kotlin-native</a></li><li><a href="https://medium.com/@kpgalligan/kotlin-native-stranger-threads-c0cf0e0fb847" target="_blank" rel="noreferrer">Kotlin/Native (Stranger) Threads – Kevin Galligan – Medium</a></li><li><a href="https://medium.com/@kpgalligan/kotlin-native-stranger-threads-ep-2-208523d63c8f" target="_blank" rel="noreferrer">Kotlin Native Stranger Threads Ep 2 – Kevin Galligan – Medium</a></li><li><a href="https://github.com/JetBrains/kotlin-native/pull/2850" target="_blank" rel="noreferrer">Kpgalligan/20190315/generics by kpgalligan · Pull Request #2850 · JetBrains/kotlin-native</a></li><li><a href="https://github.com/Kotlin/kotlinx.coroutines/issues/462" target="_blank" rel="noreferrer">Support multi-threaded coroutines on Kotlin/Native · Issue #462 · Kotlin/kotlinx.coroutines</a></li><li><a href="https://github.com/touchlab/DroidconKotlin/" target="_blank" rel="noreferrer">touchlab/DroidconKotlin</a></li></ul>`,32)])])}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
