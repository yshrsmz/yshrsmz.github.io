import{_ as i,a as s,o as a,X as e}from"./chunks/framework.Cp7KI1mb.js";const g=JSON.parse('{"title":"(KMP) Ignore some commonTests in a specific platform","description":"","frontmatter":{"layout":"post","title":"(KMP) Ignore some commonTests in a specific platform","category":"programming","tags":["kotlin","kmp","english"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2019/07/25/ignoring-tests-in-particular-platform-kotlin-mpp-en/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2019/07/25/ignoring-tests-in-particular-platform-kotlin-mpp-en/"}],["meta",{"property":"og:title","content":"(KMP) Ignore some commonTests in a specific platform"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2019/07/25/ignoring-tests-in-particular-platform-kotlin-mpp-en/ogp.png"}]]},"headers":[],"relativePath":"2019/07/25/ignoring-tests-in-particular-platform-kotlin-mpp-en/index.md","filePath":"posts/2019/2019-07-25-ignoring-tests-in-particular-platform-kotlin-mpp-en.md","date":{"time":"2019-07-25","string":"July 25, 2019","year":"2019","month":"07","day":"25"}}'),n={name:"2019/07/25/ignoring-tests-in-particular-platform-kotlin-mpp-en/index.md"};function o(p,t,r,l,c,h){return a(),s("div",null,[...t[0]||(t[0]=[e(`<p>In Kotlin Multiplatform Project, it is common to write tests in <code>commonTest</code>, as you can run it on all platforms you configured. However, while you want to make test &quot;common&quot; as much as you can, there might be some test cases you can&#39;t run on some specific platform. So, what to do?</p><p>A very naive way is to move those &quot;non-common&quot; test cases to platform-specific test directories. It is okay if you only target two platforms, but what if you want 3 or more target platforms? I don&#39;t think it&#39;s a good practice to have the same test cases in several platform-specific test directories.</p><p>So here&#39;s the thing. Kotlin Multiplatform Project has &#39;expect/actual mechanism&#39;, with which you can provide platform-specific declarations. With this, you can declare custom <code>@Ignore</code> annotation, which selectively ignores test cases on specific platforms.</p><p>Assume you have 2 target platforms; Android and iOS.<br> You want to create an annotation which tells test runner to ignore the annotated cases/classes on iOS.</p><p>First, you need to need the &#39;expect&#39; declaration in common code.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IgnoreIos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Then you need to write corresponding &#39;actual&#39; declarations in each platform.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IgnoreIos</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iosMain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IgnoreIos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.test.Ignore</span></span></code></pre></div><p>The key point here is in iOS &#39;IgnoreIos&#39; is a typealias for <code>kotlin.test.Ignore</code>, but it&#39;s just a useless annotation in Android. So it works as <code>kotlin.test.Ignore</code> in iOS but does nothing in Android.</p>`,10)])])}const k=i(n,[["render",o]]);export{g as __pageData,k as default};
