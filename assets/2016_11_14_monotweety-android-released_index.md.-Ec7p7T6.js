import{_ as t,a as o,o as r,X as a}from"./chunks/framework.Cp7KI1mb.js";const c=JSON.parse('{"title":"通知エリアからツイートするAndroidアプリ、Monotweetyを公開した(コードもあるよ)","description":"","frontmatter":{"layout":"post","title":"通知エリアからツイートするAndroidアプリ、Monotweetyを公開した(コードもあるよ)","category":"programming;","tags":["Android","twitter","monotweety"],"head":[["link",{"rel":"canonical","href":"https://www.codingfeline.com/2016/11/14/monotweety-android-released/"}],["meta",{"property":"og:url","content":"https://www.codingfeline.com/2016/11/14/monotweety-android-released/"}],["meta",{"property":"og:title","content":"通知エリアからツイートするAndroidアプリ、Monotweetyを公開した(コードもあるよ)"}],["meta",{"property":"twitter:card","content":"summary_large_image"}],["meta",{"property":"twitter:site","content":"@_yshrsmz"}],["meta",{"property":"twitter:creator","content":"@_yshrsmz"}],["meta",{"property":"og:image","content":"https://www.codingfeline.com/2016/11/14/monotweety-android-released/ogp.png"}]]},"headers":[],"relativePath":"2016/11/14/monotweety-android-released/index.md","filePath":"posts/2016/2016-11-14-monotweety-android-released.md","date":{"time":"2016-11-14","string":"November 14, 2016","year":"2016","month":"11","day":"14"}}'),n={name:"2016/11/14/monotweety-android-released/index.md"};function i(l,e,s,p,d,m){return r(),o("div",null,[...e[0]||(e[0]=[a(`<p><img src="https://raw.githubusercontent.com/yshrsmz/monotweety/master/assets/header.png" alt="header"></p><p>掲題のとおり、アプリを <s>Google Play Storeに公開しました</s>。(2022/08更新: <a href="/2021/12/31/lookingback-2021/">公開終了しました</a>)<br> 今回はコードも<a href="https://github.com/yshrsmz/monotweety" target="_blank" rel="noreferrer">GitHubで公開してます</a>。Apache v2です。</p><p>名前は&quot;Monotweety&quot;。「モノツイーティ」と読みます。</p><p>機能はホントにシンプルで、「通知エリアからツイートする」だけです。</p><p>実際のところ通知エリアからツイートできるのはAndroid 7.0以降の端末だけで、それ未満の端末では通知をタップすると編集ダイアログが表示されます。</p><ol><li>通知から</li></ol><p><img src="https://lh3.googleusercontent.com/2qJiK92gIYxynwaFl5HPZt23cd60s_2djZLPVg_dIipvl-ykfWAvzTZAnO1hxclJxv6-1tXgOj0aNr6oKPbpykI4239Kl32xLZ8dJG_q07Whq1q1A3u60qSu9f8S4nTFVB2nYNRad5nzunaBYGAiwZ2SRw7LFwo6Gk8e_GjqU20BOOcvoYMs-vCbmEWIvBqr7UsFAEljrtqQ36h-4k2JRK4qsIY3Kk3ByU0lyQTKWmOE0n0d1kfUw0-MVFhlGzvbn8Ki1_18cVP9URmIN5Xfikkoy1Reuw1d1RR5ky-6LTZ5PUNB2iXX1kdKxLZVUKJ3thZImaZOuv8RzEsGKiR3hd7d5vEYt0F6qmmvplcPl8FUBNThdasF0PlbGN1NwIhTAc665Iegs7nZmVsu3vSVGBxmK9wHC9-MOnFBZkRK_hcRbOWexFLYescrI07mvRIyat6Ilys0RN-sKCQv5QYRLURe-LVRwgRKBO_EukLM95ABl1kfxIqmu0dH0iVBeW7894flNCCaoeDNz0xYUJd07xW7vyIfLEv9WA1sciOFvnMzE3Ab8mjPFNG_KoHM1i6KVx_jgEwRiiCDDtm2d993am6XvB55arzcds1My7bV9O553TMq=w448-h796-no" alt="notification"></p><ol start="2"><li>直でツイート</li></ol><p><img src="https://lh3.googleusercontent.com/at1jZ9ayA0sg5b3_D4bAiNn-IWOS2AGe9dTabTPzDwrfrmdeWJdgJPOk7CZJf6SPVO90eNO0eJlqxX6q2LqI1YsLygcVBSPsoWGtKlq88YrcEFrtkpJq0qsaXTs7Ub7uIBDCKqED0eZpkrLUCsFNl0I_xjZIlHmL6HA02bxKPvcwkWy65dvQEezcU6tFNw-J7r-PhSKeN50h4QT61g91E2Ov-GZE1XlZm64RqVgHfsLw-s6z8Pn9azQo-Ho9toUQx6SBKkkymBeoQ4uC_IoiOkyt5FO5Vje-qUkLyaQ8tPNpv0lr7fe3KPEiJqxaiTDm_m43yni3UxxrmMax9-ufIG83TkUEAKb-LlX-lYLrwFugyeeRbnjLuBomMuo6V4urXDQSYVhFINWgMwdaOMfeMRdXl8Fy_Hxw4SrY9w7qFT4ka4VwC3qczMx1A0DeTCnLS-d4iP9TXN93RnE_kPzRXAnzJgPgsue3oqh1us86cdMgIWIAzNAEUffIPFq2OllQdPk03Q7JQgCTMnCtmg_X2pnRbrQ2DdZZPco_L9ykHtJBArKpFcB-vpwzK4RhRYu83ZGTo5IkPjO6lEcBB3nKbS8dhAtLb_KQKNy_OWEc9KzKLf8b=w448-h796-no" alt="direct tweet"></p><ol start="3"><li>Android 7.0未満ではダイアログから</li></ol><p><img src="https://lh3.googleusercontent.com/2UsabktYkOXkuPfnibnpFQ_cGUJhJ8VNdMuKY4aXYi3bcBSfCDIpz73VHmD0fFvCsjKGOU9OKOo8_m_mMCJmYq-esRngM4aEbE4z5mPzwBMLPz6H779HE5cmL9C9BTW7x0U5S1M1IRgUF0Yum0eLATeoQcLoGBt_Wx7FN9BYTopLbtAe8k0c5XrnTqBbMe1aJE0FfokHkp-HLqhNmz3M5myE0ADBY2e3Snv-9Fcw2IwEgQGrooGLaUCXbndYeQ8STEqoanKrNTrP1MT7fdxzbVdNos8EqJyi4roS-WISbY4zmQ5hsYlIFpFXCKbJIcI0fqtAULxiqNBMpgnVFy06fhW0hJM17wILDa3T2Fp-Fdy7HsNyWClR4AIqvSIp884V4l6gnfjraBMDuxX5K-RwyHUMgoCuMhayr-pzkHGOX7ElfHcIxiducZWbg8fu0IPd5kDWjLpQz1gJA6_VdgApAIEmPZh_f3ctTjmuY6xuyC6tamtgqniY8OsBk0IbIgfaony_py0RRvff0Q99iyAb8ES6Z_j-ZUirL9LI2WjGFJE5caSlr5Dkyw69ueDXS7AkmUSTvbxwegOZeneJLdGeweZnY_SNmE5F6VksuzQi2uSEr8wk=w448-h796-no" alt="from dialog"></p><h2 id="モチベーション" tabindex="-1">モチベーション <a class="header-anchor" href="#モチベーション" aria-label="Permalink to &quot;モチベーション&quot;">​</a></h2><ul><li>ひとりごとみたいにツイートすることが多いのでツイート特化型アプリがほしい</li><li>既存の通知エリアからツイートできるアプリは古くてメンテされてるか不明なものばかり</li><li>今風のかっこいいデザインのアプリがほしい</li><li>Android NでDirect Reply(通知から直で返信できる機能)が追加<br> -&gt; あれ、これ使えるんじゃ…？</li></ul><p>という感じ。</p><p>要件は下記の通り</p><ul><li>通知エリアからツイートできること</li><li>文字数超過したら編集できること</li></ul><p>で、この他にお遊びみたいなものだけどいわゆる「連ツイ(in reply toでツイートをつなげる)」機能もつけてみました。</p><p>Direct Replyで用意されているのはカスタマイズができない入力エリアなので、文字数チェックは送信ボタンを押した後に行っていて、超過していた場合は編集用の画面が立ち上がる作りになっています。</p><p>今回はだいたいコーディングだけで102時間くらいかかったらしい(wakatime調べ)。</p><h2 id="アプリ名の由来" tabindex="-1">アプリ名の由来？ <a class="header-anchor" href="#アプリ名の由来" aria-label="Permalink to &quot;アプリ名の由来？&quot;">​</a></h2><p>&quot;Monochrome&quot;ではなく&quot;Monologue&quot;のmonoです。<br> 最初は&quot;Monologue&quot;で作ろうとしたけど案の定すでにTwitterに登録済みのアプリがありました…<br><a href="/2015/11/10/omnitweety-andrid-released-share-url-twitter/">Omnitweetyというアプリもリリースしてます</a>が、特に「Omni - Mono」で対になる、とか特に狙ったわけではないです。</p><h1 id="※ここから下は技術者向け" tabindex="-1">※ここから下は技術者向け ---------- <a class="header-anchor" href="#※ここから下は技術者向け" aria-label="Permalink to &quot;※ここから下は技術者向け ----------&quot;">​</a></h1><h2 id="使ったライブラリとか" tabindex="-1">使ったライブラリとか <a class="header-anchor" href="#使ったライブラリとか" aria-label="Permalink to &quot;使ったライブラリとか&quot;">​</a></h2><p>網羅的なものは<a href="https://github.com/yshrsmz/monotweety/blob/master/app/build.gradle" target="_blank" rel="noreferrer">build.gradle</a>見てもらうとして、主要なものを軽く紹介します。</p><h3 id="kotlin" tabindex="-1"><a href="http://kotlinlang.org" target="_blank" rel="noreferrer">Kotlin</a> <a class="header-anchor" href="#kotlin" aria-label="Permalink to &quot;[Kotlin](http://kotlinlang.org)&quot;">​</a></h3><p>最近流行りのアレ。<br> 拡張関数とかdata classとか、とても便利です。<br> あとリスト操作関数が充実しててめちゃくちゃ捗ります。</p><h3 id="conductor" tabindex="-1"><a href="https://github.com/bluelinelabs/conductor" target="_blank" rel="noreferrer">Conductor</a> <a class="header-anchor" href="#conductor" aria-label="Permalink to &quot;[Conductor](https://github.com/bluelinelabs/conductor)&quot;">​</a></h3><p>Viewベースのアプリケーションを作るためのフレームワーク。<br> 数年前にSquareが<a href="https://medium.com/square-corner-blog/advocating-against-android-fragments-81fd0b462c97#.cf8ph0mnl" target="_blank" rel="noreferrer">Fragment使わないぞ！って記事</a>をだしていましたが、その流れのライブラリですね。</p><p>Fragment使いたくないけどどうすんの？って言われた時に候補としてまず挙がるのはSquare製の<a href="https://github.com/square/mortar" target="_blank" rel="noreferrer">Mortar</a>/<a href="https://github.com/square/flow" target="_blank" rel="noreferrer">Flow</a>だと思いますが、こちらのConductorはMortar/Flowよりもかなりシンプルな作りになっています。</p><p>Mortar/FlowはDaggerと一緒に使う前提で作られてるような感じで、SystemServiceにカスタムのServiceを追加したりいろいろ前準備が多くて「なるほどわからん」状態だったけれども、こちらは完全に&quot;better fragment&quot;にフォーカスしているような印象です。</p><p>DaggerだとかMVPだとかMVVMとかそういうのは開発者側で勝手にやってくれという方針なのでライブラリとして迷いどころは少なく、とても扱いやすかったです。なにより、サンプルが豊富で非常に助かりました。</p><p>ちなみにLollipop以上だったらちゃんと画面間のShared Element Transitionも行えます。</p><h3 id="dagger2" tabindex="-1"><a href="https://github.com/google/dagger" target="_blank" rel="noreferrer">Dagger2</a> <a class="header-anchor" href="#dagger2" aria-label="Permalink to &quot;[Dagger2](https://github.com/google/dagger)&quot;">​</a></h3><p>とてもイケてるDIライブラリ。そういえば本家SquareのDagger1はdeprecatedになってましたね。<br> 今回のComponent構成はこんな感じ。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>AppComponent ─ UserComponent ┬ SettingComponent</span></span>
<span class="line"><span>  │                          └ ComposeStatusComponent</span></span>
<span class="line"><span>  │</span></span>
<span class="line"><span>  └ ActivityComponent ┬ SplashComponent</span></span>
<span class="line"><span>                      └ LoginComponent</span></span></code></pre></div><p>グローバルなAppComponentの下にユーザ毎に作られるUserComponentがあります。<br> ユーザ情報が必要な各画面のComponentはUserComponentを親に持ちます。<br> ユーザ情報が必要ない画面のComponentはActivityComponentを親に持ちます。</p><p>ここ、図の上ではSettingComponent/ComposeStatusComponentはActivityComponentに依存してないように見えますが、実はActivityComponentで管理されているインスタンスを、Componentに渡すModule経由で引き回してたりします。</p><p>これはActivityがUserComponentの作成より前(ログイン確認より前)に作られるのが原因です。<br> Daggerでは複数のScoped Componentを親に持つことができないので、苦肉の策としてこのようにActivityComponentで管理されているインスタンスを渡す形にしました。<br> うまいやり方があればいいのですが。</p><h3 id="storio" tabindex="-1"><a href="https://github.com/pushtorefresh/storio" target="_blank" rel="noreferrer">StorIO</a> <a class="header-anchor" href="#storio" aria-label="Permalink to &quot;[StorIO](https://github.com/pushtorefresh/storio)&quot;">​</a></h3><p>SQLiteをリアクティブに扱うライブラリ。<br> よりいろいろやってくれるSQLbrite、って感じでしょうか。<br> Not ORM。</p><p>モデルとクエリの結果をマッピングするリゾルバクラスを生成するアノテーションプロセッサも用意されてますが、Kotlinはサポートされてないので手動で書く必要があります。</p><p>今回実はSQLite使う必要特になかったのですが、アーキテクチャのデモ的な側面もあったのでSQLite入れてます。<br> GitHub上にAndroidアプリに様々なアーキテクチャ適用してみたよ系のデモレポジトリって結構あるのですが、だいたいAPI通信とメモリキャッシュまでで止まっててじゃあその先どう考えてるの？　って思うことが多かったので使ってみた次第。</p><p>ともあれ、StorIOはAPIもきれいでわかりやすいので、リアクティブに使えるSQLiteライブラリを探している方は試してみてはいかがでしょう。</p><h2 id="アーキテクチャ" tabindex="-1">アーキテクチャ <a class="header-anchor" href="#アーキテクチャ" aria-label="Permalink to &quot;アーキテクチャ&quot;">​</a></h2><p>前作のOmnitweetyでは、Android Clean Architectureを採用しました。ほとんど写経です。<br> MonotweetyではAndroid Clean Architectureを踏襲しつつも諸々シンプルに再構成しています。<br> たとえばDataSource周りのファクトリクラスを廃止してみたり、機能ごとのパッケージ構成にしてみたり。<br> DataSourceの差し替えとか実際にアプリの実行中に発生することなんてほぼないので、まあ必要ないよねー、という判断です。</p><p>あ、あとView周りに関してはMVPではなく、MVVMっぽいアーキテクチャとなっています。<br> 開発が佳境だった頃にKotlinのAndroid Studio PluginとDataBindingの相性が非常に悪かったので今回は地道にbinding処理書いてますが、Kotlin 1.0.5でだいぶ改善したらしいのでそのうち書きなおすのもやってみたい。</p><h2 id="アイコン" tabindex="-1">アイコン <a class="header-anchor" href="#アイコン" aria-label="Permalink to &quot;アイコン&quot;">​</a></h2><p>アイコンはOmnitweetyと同様、<a href="https://99designs.jp/" target="_blank" rel="noreferrer">99designs</a>を使っています。<br> 今回はコンペではなく、Omnitweetyのコンペの時に最後まで悩んで落としてしまったデザイナーさんにお願いしました。<br> 前回同様とてもかわいらしいアイコンが仕上がって満足しています。</p><p>こちらからは以上です。</p><p>参考:</p><ul><li>PlayStoreリンク: <s>ttps://play.google.com/store/apps/details?id=net.yslibrary.monotweety</s></li><li>GitHubリンク: <a href="https://github.com/yshrsmz/monotweety" target="_blank" rel="noreferrer">yshrsmz/monotweety</a></li><li><a href="/2015/11/10/omnitweety-andrid-released-share-url-twitter/">TwitterにURLを共有するAndroidアプリ、Omnitweetyを公開した</a></li></ul>`,51)])])}const g=t(n,[["render",i]]);export{c as __pageData,g as default};
