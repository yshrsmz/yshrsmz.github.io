{"number":2,"id":"I_kwDOK-znbM56vpCz","title":"Zenn の Scraps 的なものを GitHub Issues を CMS として実現する","body":"## 要件\r\n\r\n- 逐次、タイムライン的な形で更新できる\r\n- Markdown で入力できる\r\n- クローズできる\r\n- タグをつけられる\r\n  - ブログ記事と共有する\r\n    - https://www.codingfeline.com/tags/ にまとめて表示できる\r\n- ブログ本体のデプロイ毎に GitHub API を使いすぎないようにする\r\n  - Issue の更新トリガーで JSON を生成するような感じがよさそ\r\n- 並び順は作成の降順？\r\n- 各コメントにアンカーつけたい","state":"open","tags":["GitHub","VitePress","Vue.js"],"originUrl":"https://github.com/yshrsmz/scraps/issues/2","createdAt":"2023-12-29T10:50:59Z","updatedAt":"2024-01-01T16:38:57Z","comments":[{"body":"- しかし、JSON生成ロジックを Scrap 管理用レポジトリに入れてしまうとコードが分散してしまう\r\n  - Custom Action を yshrsmz.github.io の方に作成し、それをこのレポジトリから使う？\r\n  - issues トリガーで、issue 単位の JSON を作成/更新 -> コミット -> push トリガーでブログ更新\r\n    - https://docs.github.com/ja/actions/using-workflows/events-that-trigger-workflows#issues\r\n  - PAT が必要になるが、まあ致し方なし\r\n  - reusable workflow として共有できそう\r\n    - https://docs.github.com/en/actions/using-workflows/reusing-workflows#access-to-reusable-workflows","createdAt":"2023-12-29T10:56:53Z","updatedAt":"2023-12-29T15:50:53Z","id":"IC_kwDOK-znbM5vk65y"},{"body":"```yml\r\n# yshrsmz/scraps\r\nname: dispatch scrap update\r\n\r\non:\r\n  issues:\r\n  issue_comment:\r\n\r\njobs:\r\n  create-scrap:\r\n    # yshrsmz.github.io の workflow を参照\r\n    uses: yshrsmz/yshrsmz.github.io/.github/workflows/_create-scrap.yml@scraps\r\n    with:\r\n      issue_number: ${{ github.event.issue.number }}\r\n    secrets:\r\n      target_github_token: ${{ secrets.GITHUB_TOKEN }}\r\n\r\n```\r\n\r\n```yml\r\n# _create-scrap.yml\r\njobs:\r\n  create-scrap:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: create scrap\r\n        # action も workflow も同じレポジトリ内ではあるが、ここもフルパスで指定する必要有り\r\n        uses: yshrsmz/yshrsmz.github.io/packages/action-create-scrap@scraps\r\n        with:\r\n          issue_number: ${{ github.event.inputs.issue_number }}\r\n          github_token: ${{ secrets.target_github_token }}\r\n\r\n```","createdAt":"2023-12-30T08:04:02Z","updatedAt":"2023-12-30T08:04:02Z","id":"IC_kwDOK-znbM5vm8KG"},{"body":"repository_dispatch するか、 yshrsmz.github.io を clone & push するか\r\n\r\nrepository_dispatch だと各レポジトリで PAT が必要になるから、 clone & push のほうが楽ぽい","createdAt":"2023-12-30T14:32:41Z","updatedAt":"2023-12-30T14:35:03Z","id":"IC_kwDOK-znbM5vnKyp"},{"body":"ページネーション、これでいけるらしい\r\n\r\n```ts\r\nconst comments = await octokit.paginate(\r\n    octokit.rest.issues.listComments,\r\n    {\r\n      ...repo,\r\n      issue_number: issueNumber,\r\n      per_page: 10,\r\n    },\r\n    (response) => response.data,\r\n  )\r\n```","createdAt":"2023-12-30T16:09:12Z","updatedAt":"2023-12-30T16:09:12Z","id":"IC_kwDOK-znbM5vnPKL"},{"body":"commit は git config が必要\r\ncredential は `@actions/core` に `token` を与えると persist してくれる","createdAt":"2023-12-30T16:12:34Z","updatedAt":"2023-12-30T16:12:34Z","id":"IC_kwDOK-znbM5vnPS6"},{"body":"vitepress で JSON からページを描画するには\r\n\r\n- dynamic routing 用の設定ファイル\r\n  - https://vitepress.dev/guide/routing#dynamic-routes\r\n- data loader\r\n  - https://vitepress.dev/guide/data-loading#data-from-local-files\r\n  - https://vitepress.dev/guide/cms\r\n\r\nが必要","createdAt":"2023-12-31T04:37:09Z","updatedAt":"2023-12-31T04:37:09Z","id":"IC_kwDOK-znbM5vnqh-"},{"body":"- `paths loader` は本文を `content` として渡すことができるが、html か Markdown を想定しているようなので、今回の用途には合わない \r\n- `data loader` を別で作る必要あり\r\n  - GitHub REST Api は issue や comment を plain text で返すので、 `data loader` で MarkdownIt をかませる必要あり\r\n\r\n\r\n```ts\r\nimport { createMarkdownRenderer, type SiteConfig } from 'vitepress'\r\n\r\nexport default {\r\n  watch: ['data/scraps/*.json'],\r\n  async load(watchedFiles: string[]) {\r\n    // config は VITEPRESS_CONFIG\r\n    const config: SiteConfig = (global as any).VITEPRESS_CONFIG\r\n\r\n    const md = await createMarkdownRenderer(\r\n      // ...\r\n    )\r\n\r\n    return watchedFiles\r\n      .map((file) => readFileSync(file, 'utf-8'))\r\n      .map<Scrap>((json) => JSON.parse(json))\r\n      .map((scrap) => {\r\n        return {\r\n          ...scrap,\r\n          body: md.render(scrap.body),\r\n          comments: ... // comments の body も md.render() する\r\n        }\r\n      })\r\n  }\r\n}\r\n``` ","createdAt":"2023-12-31T08:52:52Z","updatedAt":"2023-12-31T08:52:52Z","id":"IC_kwDOK-znbM5vocOr"},{"body":"```shell\r\necho '${{ needs.create-scrap.outputs.output }}' > ./packages/blog/data/scraps/${{ github.event.issue.number }}.json\r\n```\r\n\r\nだと、JSON に含まれる single quote が消えてしまう 🤔 ","createdAt":"2023-12-31T16:20:23Z","updatedAt":"2023-12-31T16:41:14Z","id":"IC_kwDOK-znbM5vo4Ol"},{"body":"一度環境変数に入れてあげればいけそう\r\n\r\n```yml\r\n- run: |\r\n    echo $SCRAP_JSON > ./packages/blog/data/scraps/${{ github.event.issue.number }}.json\r\n  env:\r\n    SCRAP_JSON: ${{ needs.create-scrap.outputs.output }}\r\n```","createdAt":"2023-12-31T16:46:35Z","updatedAt":"2023-12-31T16:46:35Z","id":"IC_kwDOK-znbM5vo5d8"},{"body":"変数パターンだと連続したスペースがまとめられちゃってそう。インデントが崩れる。\r\n\r\ndouble quote で囲ってあげるといける\r\n\r\n```diff\r\n  - run: |\r\n-     echo $SCRAP_JSON > ./packages/blog/data/scraps/${{ github.event.issue.number }}.json\r\n+     echo \"$SCRAP_JSON\" > ./packages/blog/data/scraps/${{ github.event.issue.number }}.json\r\n    env:\r\n      SCRAP_JSON: ${{ needs.create-scrap.outputs.output }}\r\n```\r\n\r\n- [bash - Why does my shell script choke on whitespace or other special characters? - Unix & Linux Stack Exchange](https://unix.stackexchange.com/questions/131766/why-does-my-shell-script-choke-on-whitespace-or-other-special-characters)\r\n","createdAt":"2024-01-01T05:50:15Z","updatedAt":"2024-01-01T05:58:57Z","id":"IC_kwDOK-znbM5vplKv"},{"body":"アンカーは issue/comment の `node_id` を使うと良さそう。\r\n`node_id` は GraphQL API の `id` に相当するので、将来的に(あるかどうか知らんけど) GraphQL API に乗り換えるとしたらはかどりそ\r\n\r\n- [グローバルノードIDの利用 - GitHub Docs](https://docs.github.com/ja/graphql/guides/using-global-node-ids)\r\n","createdAt":"2024-01-01T16:27:25Z","updatedAt":"2024-01-01T16:27:25Z","id":"IC_kwDOK-znbM5vqas-"},{"body":"残作業\r\n\r\n- 対象 issue の限定方法\r\n  - 指定の　label がついた issue を exclude するか include するか\r\n- ↑の方法で後日更新されて対象に含まれなくなった issue をどうやって削除するか","createdAt":"2024-01-01T16:38:56Z","updatedAt":"2024-01-01T16:38:56Z","id":"IC_kwDOK-znbM5vqbkm"}]}
