{"number":4,"id":"I_kwDOK-znbM57e4mO","title":"SaaS のテナント分離戦略について","body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/saas-tenant-isolation-strategies.html\r\n\r\nSaaS Tenant Isolation Strategies: Isolating Resources in a Multi-Tenant Environment\r\n\r\nこれ読む","state":"open","tags":["SaaS","AWS"],"originUrl":"https://github.com/yshrsmz/scraps/issues/4","createdAt":"2024-01-09T06:11:04Z","updatedAt":"2024-01-10T01:20:10Z","comments":[{"body":"## The isolation mindset\r\n\r\nhttps://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/the-isolation-mindset.html\r\n\r\n- 分離はオプショナルではない\r\n  - 分離は SaaS の基本的な構成要素である\r\n  - マルチテナント型 SaaS のプロバイダは、テナントのリソースを分離するための方策を取る必要がある\r\n- 認証/認可と分離は別物\r\n  - ログイン管理/アクセス管理を下からと言ってリソースを分離したことにはならない\r\n  - 分離というパズルのピースの一つであるけど、それだけで充分ではない\r\n- 分離の実装/強制は SaaS 利用者に委ねてはならない\r\n  - 分離を侵害するようなコードを書くとは思わないが、確実ではない。\r\n  - そもそもそのようなことが起こらないように、アクセススコープの管理は分離規則を管理する共通の処理によって行われるべき\r\n    - SaaS 利用者に委ねない、ということ\r\n- 分離のための既存のソリューションがなければ自作する必要がある\r\n  - AWS Identity や IAM など、テナント分離を容易にするソリューションは多数存在する\r\n  - これらを組み合わせることでテナント分離をある程度シンプルに実現できることもある\r\n  - しかし、既存のソリューションが適さない場合ももちろんある。\r\n  - だからといってそれがテナント分離の要件を引き下げる理由になってはならない。なければ自作すること\r\n- 分離はリソースレベルの構成要素ではない\r\n  - マルチテナントと分離の文脈では、分離を具体的なインフラリソースの境界と見る向きもある\r\n    - これはDB、ECS、VPCなどのインフラ全体をテナント毎に運用することに繋がる\r\n    - 確かにこれはよくある分離の形態のひとつであるが、テナント分離の実現方法はこれだけではない\r\n  - 各種リソースを共用するような場合においても、テナント分離は実現できる\r\n    - このようなリソース共有型のモデルでも、分離は論理的な構成要素として、ランタイムに実現可能\r\n  - 要点: 分離はリソースのサイロ化によってのみ実現するものではない\r\n- 事業ドメインによっては特定の分離要件がある\r\n  - テナント分離のアプローチは様々あるが、事業ドメインによっては特定のアプローチが必要な場合もある\r\n  - 例えば高いコンプライアンスが求められる業界では、ポリシーベースの分離では不十分で、テナント毎にDBを用意する必要があるかもしれない。","createdAt":"2024-01-09T06:32:40Z","updatedAt":"2024-01-09T06:32:40Z","id":"IC_kwDOK-znbM5wNHVN"},{"body":"## Isolation: Security or noisy neighbor?\r\n\r\nhttps://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/isolation-security-or-noisy-neighbor.html\r\n\r\n- 分離というトピックはカテゴリ分けしづらい\r\n- 一般的にはセキュリティやコンプライアンスという文脈で考慮されることが多い\r\n  - テナント間のリソースアクセスを制限する境界をつくるため\r\n- これは重要な要素である一方、「ノイジー・ネイバー」やパフォーマンス問題を解決するための分離、という観点もある\r\n- このペーパーでは、セキュリティによる重きを置きつつも、両方の観点をカバーしていく\r\n\r\nノイジー・ネイバー: 共有リソースを一部のテナントが大量に消費して、別のテナントに悪影響(パフォーマンス下がるとか)がでる問題","createdAt":"2024-01-09T07:23:35Z","updatedAt":"2024-01-09T07:23:35Z","id":"IC_kwDOK-znbM5wNSui"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/silo-isolation.html\r\n\r\n## Core isolation concepts - Silo isolation\r\n\r\n- テナント毎に個別のリソーススタックを用意する\r\n  - E2E で完全に分離されたテナント分離を実現する\r\n- Pros\r\n  - 厳しいコンプライアンスモデルのサポート\r\n  - ノイジー・ネイバーの懸念なし\r\n  - テナント毎のコスト計算\r\n  - 障害の影響範囲が狭い\r\n- Cons\r\n  - ビジネスのスケール\r\n    - 作成できるアカウントの数に限りがある\r\n    - アカウントが増えたときのメンテコスト\r\n  - コスト\r\n    - 全アカウントが個別の環境を持つのでコスト高い\r\n  - フットワークの軽さ\r\n    - 非中央集権的なサイロ型はメンテナンスコストが高いので、プロダクトの迅速な進化の足かせとなる可能性がある\r\n  - 管理と監視の非中央集権化\r\n    - すべてのテナントの活動を単一のツールで管理・監視できるようにしたい\r\n    - しかしサイロ化したマルチテナントでは、各テナントのインフラからデータを集計しなければならないので、難易度が高い\r\n      - 実現可能ではあるけども、比較的コストが高い","createdAt":"2024-01-09T07:41:05Z","updatedAt":"2024-01-09T07:45:52Z","id":"IC_kwDOK-znbM5wNXHR"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/pool-isolation.html\r\n\r\n## Core isolation concepts - Pool isolation\r\n\r\n- サイロ型は分離という観点ではとてもわかり易いし効果的\r\n- しかし、SaaS を作りたい企業は、テナント間でリソース/インフラを共有することによる効率さとか機敏さ、コスト効率も求めているはず\r\n- プール型はインフラを共有するアプローチ\r\n- プール型では、全テナントが共通のインフラを利用する\r\n  - 計算資源だけでなく、DBも共有している\r\n    - テーブルはテナントIDによってインデックスされている\r\n- このモデルは、SaaS プロバイダー的には効率がいいものの、テナント分離という観点では物事を複雑にしている\r\n  - リソースが共有されているので、テナント分離の実装が何を意味するのか不明瞭\r\n  - 典型的なネットワークや IAM による境界定義が行えない\r\n- 実装はよりチャレンジングではあるが、だからといって **テナント分離の要件を緩和する言い訳にしてはならない**\r\n  - プール型では、別テナントのデータにアクセスしてしまう危険性は高まる\r\n    - そのため、リソースの分離を確実にすることに特に注意を払う必要がある\r\n- Pros\r\n  - 開発の機敏さ\r\n    - よりシンプルになるので、開発速度が上がる\r\n    - 管理する環境が一つになるので、サイロ型のようなテナント毎に必要な作業がなくなる\r\n  - コスト\r\n    - プール型にすることで、インフラはテナント全体の利用に応じてスケールするようになる。\r\n  - 管理/運用がシンプル\r\n  - イノベーション\r\n    - 運用/管理がシンプルになるので、より機能にフォーカスできる→イノベーションが生まれる\r\n- Cons\r\n  - ノイジー・ネイバー\r\n    - リソースを共有すればするほど、テナント間で計算資源の奪い合いになる可能性が上がる\r\n    - 良いマルチテナントアーキテクチャはこの影響を最小限に抑えようとするが、プール型だとこの影響を完全に取り除くことはできない\r\n  - テナント毎のコスト計算\r\n    - より細かいデータの集計が必要\r\n  - 障害の影響範囲\r\n    - 障害は基本的に全テナントに影響する\r\n    - 障害を特定し、表面化し、障害からうまく回復できるレジリエントな環境の構築に、さらに深く取り組む必要がある。\r\n  - コンプライアンス\r\n    - ロジック的にテナント分離は実現されていても、インフラを共有するため、顧客がこの運用を嫌がる可能性がある\r\n    - これはコンプライアンスの遵守や規制が厳しい事業ドメインで特に顕著\r\n      - このような場合は、システムの一部をサイロ化する必要あり\r\n        - ブリッジ型を参照のこと","createdAt":"2024-01-09T08:22:57Z","updatedAt":"2024-01-09T08:22:57Z","id":"IC_kwDOK-znbM5wNjSp"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/the-bridge-model.html\r\n\r\n## Core isolation concepts - The bridge model \r\n\r\n- サイロ型やプール型は分離に対して非常に明確なアプローチであるが、SaaS プロバイダ的には分離の見方はそれほど絶対的なものではない\r\n- 実際のアプリケーションを見てシステムをより小さなサービスに分解していくと、サイロ型とプール型両方のアプローチが混在が必要なことがわかる\r\n  - これをブリッジ型と呼ぶ\r\n- 図(元サイト参照のこと)だと\r\n  - Web層は共通\r\n  - ビジネスロジックのあるアプリケーション層とDBは個別\r\n- このモノリスをマイクロサービスに分割しようと思うと、各種マイクロサービスはサイロ型とプール型が混在するだろうことが想像できる\r\n- AWS の各機能を利用してどの用にサイロ型やプール型を実装していくかについては、また別の項で説明する\r\n- 重要なことは、サイロとプールの見方は、様々な分離要件を持つサービスの集まりに分解された環境では、より細かくなるということ\r\n- Pros and Cons\r\n  - ブリッジ型はサイロ型とプール型のハイブリッドで、それぞれの機能に適した実装を選択することができる\r\n  - サイロ型の価値観や信条はシステムの各領域に依然として適用される\r\n  - Pros and Cons を考える歳は、アーキテクチャの各リソースやレイヤについて、サイロ型・プール型のトレードオフを考える必要がある","createdAt":"2024-01-09T10:13:58Z","updatedAt":"2024-01-09T10:13:58Z","id":"IC_kwDOK-znbM5wOPi9"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/tier-based-isolation.html\r\n\r\n## Core isolation concepts - Tier-based isolation\r\n\r\n- プランに応じてサイロ型/プール型を提供する\r\n- アプリのアーキテクチャというよりは、サービスのパッケージング寄りの考え方\r\n- 基本的に、プール型と同じバージョンをサイロ型でも使う\r\n  - この時サイロ型の環境はプール型のクローンで、たまたま1テナントだけが使ってるのでサイロ型になっている、という状態","createdAt":"2024-01-09T10:19:15Z","updatedAt":"2024-01-09T10:19:15Z","id":"IC_kwDOK-znbM5wORvx"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/identity-and-isolation.html\r\n\r\n## Core isolation concepts - Identity and isolation\r\n\r\n- アイデンティティがどの用に分離と結びついているか考えるのも必要\r\n- テナントの分離を検討しているのであれば、現在 SaaS 環境のリソースにアクセスしているテナントを表し、識別することが必要になる\r\n- 多くの場合、アイデンティティは他の構成要素と組み合わせて、分離スキームのコアとなるスコープ・ルールやポリシーを取得するために使われる\r\n- このポリシーの定義や適用方法は各分離モデルやサービスによって異なる\r\n- しかし、アプローチの基本は図5(元サイト参照のこと)のようになる\r\n- この図はアイデンティティがより広い分離モデルのストーリーの中にどの用に組み込まれるかを一般化したもの\r\n  - ユーザが認証されると、システムはテナント・コンテキストをアプリケーションに返す\r\n    - ユーザの属するテナント情報と、そのテナントを分離するためのポリシーを含む\r\n  - このコンテキストはすべてのインタラクションを通じてアクセスでき、SaaS 環境の顆粒の要素によってリソース(この場合はDB)へのアクセスを限定するために使われる\r\n- スコープの取得や適用は分離モデルや利用するリソースによって異なるが、中核となる概念は同じ\r\n- 重要なバリエーションとして、テナント・スコープの決定方法がある\r\n  - このスコーピング・コンテキストはデプロイ時に決定されることもあるし、ランタイムに取得されることもある\r\n  - それぞれの詳細は様々なアーキテクチャにおける具体的な分離の特徴を見ながら触れていく","createdAt":"2024-01-09T10:38:05Z","updatedAt":"2024-01-09T10:38:05Z","id":"IC_kwDOK-znbM5wOZk6"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/full-stack-isolation.html\r\n\r\n## Implementing silo isolation - Full stack isolation\r\n\r\n- 全リソースをテナント毎に用意するパターン\r\n- AWSアカウントごと分ける\r\n- Virtual Private Cloud(VPC)で分離","createdAt":"2024-01-09T10:42:01Z","updatedAt":"2024-01-09T10:42:09Z","id":"IC_kwDOK-znbM5wObM8"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/subnet-silo-isolation.html\r\n\r\n## Implementing silo isolation - Subnet silo isolation\r\n\r\n- VPC の中の個別の subnet で管理する\r\n- ネットワークのルーティング周りでテナント間アクセスを防ぐ\r\n- 有効ではあるが、おすすめしない\r\n  - メンテナンスコスト、スケール上の課題ですぐに破綻する\r\n\r\n### Targeted silo isolation\r\n\r\n- 一部のマイクロサービスだけサイロ型にする\r\n- TBD","createdAt":"2024-01-09T11:12:19Z","updatedAt":"2024-01-09T11:12:19Z","id":"IC_kwDOK-znbM5wOmo5"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/silo-compute-considerations.html\r\n\r\n## Implementation silo isolation - Silo compute considerations\r\n\r\n- (前述のマイクロサービスのような)アプリケーションをサイロ化する場合、様々な計算資源の分離モデルが、どの用にアプローチに影響するか考える必要がある。\r\n- 様々なAWSコンピュートサービスのユニークな属性は、リソースが適切に分離されることを保証するために特定の手段を取ることを要求するかもしれない\r\n- コンテナを使ってサイロ化する場合\r\n  - 悪意のあるコードや設定不十分な環境がコンテナをすり抜け、あるテナントが別のテナントの情報にアクセスできるパーミッションがあるとみなしてしまうケースがある\r\n  - コンテナは適切に使用されれば堅牢な分離モデルを実装することができる\r\n  - テナント間のアクセスを防ぐ機構は、AWS のコンテナサービスによって異なる\r\n    - ECS では、サイロ分離を実現するためにテナント毎にクラスタを作る必要がある\r\n    - ECK では、EKS クラスタ内でリソースをサイロ化する追加の仕組みがある\r\n      - 図10\r\n        - EKS namespace を利用してテナントを分けている\r\n        - しかし namespace だけで完全なサイロ化を実現することはできない\r\n        - たとえば AWS App Mesh や Tigera Calico のようなソリューションと併用する\r\n- AWS Lambda を使う場合\r\n  - Lamba function はそもそも分離されている、と考えるかもしれないが、 Lambda function が前テナントをサポートする実行ロールでデプロイされている場合はその限りではない。\r\n  - プールはこれを回避する方法を提供してくれる\r\n    - しかしこれは、この関数が他のテナントからは実行できない、ということを意味している\r\n    - 図11 は Lambda で完全な分離を実現する方法の例\r\n      - テナントの分離を実現するため、テナント毎に個別の Lambda fucntion をデプロイしている。\r\n        - テナント専用の実行ロールで\r\n      - 説得力のあるソリューションに見えるが、扱いにくく、 AWS Lambda の制限を超える可能性がある\r\n        - 1K のテナントがあるときの管理・デプロイを想像すると…\r\n        - SaaS の機敏さを損なう可能性\r\n        - 一部のプレミアムプランでのみ提供、ならあり得るかも\r\n- 要点: サイロ型の実装を検討する際は、採用するAWSサービスによって個別の実現方法を検討する必要がある\r\n","createdAt":"2024-01-09T11:35:23Z","updatedAt":"2024-01-09T11:35:23Z","id":"IC_kwDOK-znbM5wOuaE"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/silo-for-any-resource.html\r\n\r\n## Implementation silo isolation - Silo for any resource\r\n\r\n- どのようなリソースであってもサイロ型でデプロイ可能\r\n- 利用する AWS　サービスを分離するストラテジーや機構はものによって異なる\r\n  - DynamoDB ならテーブルを分けるかも\r\n  - 別のストレージサービスなら、テナント毎に個別のクラスタが必要かも\r\n  - SQS や EventBridge はまた別のアプローチが必要\r\n  - → 要件によってサイロ化すべきものを適切に選別するべき\r\n- 基本的には、あらゆるリソースについて、ノイジー・ネイバーやセキュリティプロファイルを評価することが必要\r\n  - サイロ化することで得られるメリットとデメリットを比較検討する","createdAt":"2024-01-09T11:44:12Z","updatedAt":"2024-01-09T11:44:12Z","id":"IC_kwDOK-znbM5wOxVF"}]}
