{"number":4,"id":"I_kwDOK-znbM57e4mO","title":"SaaS のテナント分離戦略について","body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/saas-tenant-isolation-strategies.html\r\n\r\nこれ読む","state":"open","tags":["SaaS"],"originUrl":"https://github.com/yshrsmz/scraps/issues/4","createdAt":"2024-01-09T06:11:04Z","updatedAt":"2024-01-09T10:13:59Z","comments":[{"body":"## The isolation mindset\r\n\r\nhttps://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/the-isolation-mindset.html\r\n\r\n- 分離はオプショナルではない\r\n  - 分離は SaaS の基本的な構成要素である\r\n  - マルチテナント型 SaaS のプロバイダは、テナントのリソースを分離するための方策を取る必要がある\r\n- 認証/認可と分離は別物\r\n  - ログイン管理/アクセス管理を下からと言ってリソースを分離したことにはならない\r\n  - 分離というパズルのピースの一つであるけど、それだけで充分ではない\r\n- 分離の実装/強制は SaaS 利用者に委ねてはならない\r\n  - 分離を侵害するようなコードを書くとは思わないが、確実ではない。\r\n  - そもそもそのようなことが起こらないように、アクセススコープの管理は分離規則を管理する共通の処理によって行われるべき\r\n    - SaaS 利用者に委ねない、ということ\r\n- 分離のための既存のソリューションがなければ自作する必要がある\r\n  - AWS Identity や IAM など、テナント分離を容易にするソリューションは多数存在する\r\n  - これらを組み合わせることでテナント分離をある程度シンプルに実現できることもある\r\n  - しかし、既存のソリューションが適さない場合ももちろんある。\r\n  - だからといってそれがテナント分離の要件を引き下げる理由になってはならない。なければ自作すること\r\n- 分離はリソースレベルの構成要素ではない\r\n  - マルチテナントと分離の文脈では、分離を具体的なインフラリソースの境界と見る向きもある\r\n    - これはDB、ECS、VPCなどのインフラ全体をテナント毎に運用することに繋がる\r\n    - 確かにこれはよくある分離の形態のひとつであるが、テナント分離の実現方法はこれだけではない\r\n  - 各種リソースを共用するような場合においても、テナント分離は実現できる\r\n    - このようなリソース共有型のモデルでも、分離は論理的な構成要素として、ランタイムに実現可能\r\n  - 要点: 分離はリソースのサイロ化によってのみ実現するものではない\r\n- 事業ドメインによっては特定の分離要件がある\r\n  - テナント分離のアプローチは様々あるが、事業ドメインによっては特定のアプローチが必要な場合もある\r\n  - 例えば高いコンプライアンスが求められる業界では、ポリシーベースの分離では不十分で、テナント毎にDBを用意する必要があるかもしれない。","createdAt":"2024-01-09T06:32:40Z","updatedAt":"2024-01-09T06:32:40Z","id":"IC_kwDOK-znbM5wNHVN"},{"body":"## Isolation: Security or noisy neighbor?\r\n\r\nhttps://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/isolation-security-or-noisy-neighbor.html\r\n\r\n- 分離というトピックはカテゴリ分けしづらい\r\n- 一般的にはセキュリティやコンプライアンスという文脈で考慮されることが多い\r\n  - テナント間のリソースアクセスを制限する境界をつくるため\r\n- これは重要な要素である一方、「ノイジー・ネイバー」やパフォーマンス問題を解決するための分離、という観点もある\r\n- このペーパーでは、セキュリティによる重きを置きつつも、両方の観点をカバーしていく\r\n\r\nノイジー・ネイバー: 共有リソースを一部のテナントが大量に消費して、別のテナントに悪影響(パフォーマンス下がるとか)がでる問題","createdAt":"2024-01-09T07:23:35Z","updatedAt":"2024-01-09T07:23:35Z","id":"IC_kwDOK-znbM5wNSui"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/silo-isolation.html\r\n\r\n## Core isolation concepts - Silo isolation\r\n\r\n- テナント毎に個別のリソーススタックを用意する\r\n  - E2E で完全に分離されたテナント分離を実現する\r\n- Pros\r\n  - 厳しいコンプライアンスモデルのサポート\r\n  - ノイジー・ネイバーの懸念なし\r\n  - テナント毎のコスト計算\r\n  - 障害の影響範囲が狭い\r\n- Cons\r\n  - ビジネスのスケール\r\n    - 作成できるアカウントの数に限りがある\r\n    - アカウントが増えたときのメンテコスト\r\n  - コスト\r\n    - 全アカウントが個別の環境を持つのでコスト高い\r\n  - フットワークの軽さ\r\n    - 非中央集権的なサイロ型はメンテナンスコストが高いので、プロダクトの迅速な進化の足かせとなる可能性がある\r\n  - 管理と監視の非中央集権化\r\n    - すべてのテナントの活動を単一のツールで管理・監視できるようにしたい\r\n    - しかしサイロ化したマルチテナントでは、各テナントのインフラからデータを集計しなければならないので、難易度が高い\r\n      - 実現可能ではあるけども、比較的コストが高い","createdAt":"2024-01-09T07:41:05Z","updatedAt":"2024-01-09T07:45:52Z","id":"IC_kwDOK-znbM5wNXHR"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/pool-isolation.html\r\n\r\n## Core isolation concepts - Pool isolation\r\n\r\n- サイロ型は分離という観点ではとてもわかり易いし効果的\r\n- しかし、SaaS を作りたい企業は、テナント間でリソース/インフラを共有することによる効率さとか機敏さ、コスト効率も求めているはず\r\n- プール型はインフラを共有するアプローチ\r\n- プール型では、全テナントが共通のインフラを利用する\r\n  - 計算資源だけでなく、DBも共有している\r\n    - テーブルはテナントIDによってインデックスされている\r\n- このモデルは、SaaS プロバイダー的には効率がいいものの、テナント分離という観点では物事を複雑にしている\r\n  - リソースが共有されているので、テナント分離の実装が何を意味するのか不明瞭\r\n  - 典型的なネットワークや IAM による境界定義が行えない\r\n- 実装はよりチャレンジングではあるが、だからといって **テナント分離の要件を緩和する言い訳にしてはならない**\r\n  - プール型では、別テナントのデータにアクセスしてしまう危険性は高まる\r\n    - そのため、リソースの分離を確実にすることに特に注意を払う必要がある\r\n- Pros\r\n  - 開発の機敏さ\r\n    - よりシンプルになるので、開発速度が上がる\r\n    - 管理する環境が一つになるので、サイロ型のようなテナント毎に必要な作業がなくなる\r\n  - コスト\r\n    - プール型にすることで、インフラはテナント全体の利用に応じてスケールするようになる。\r\n  - 管理/運用がシンプル\r\n  - イノベーション\r\n    - 運用/管理がシンプルになるので、より機能にフォーカスできる→イノベーションが生まれる\r\n- Cons\r\n  - ノイジー・ネイバー\r\n    - リソースを共有すればするほど、テナント間で計算資源の奪い合いになる可能性が上がる\r\n    - 良いマルチテナントアーキテクチャはこの影響を最小限に抑えようとするが、プール型だとこの影響を完全に取り除くことはできない\r\n  - テナント毎のコスト計算\r\n    - より細かいデータの集計が必要\r\n  - 障害の影響範囲\r\n    - 障害は基本的に全テナントに影響する\r\n    - 障害を特定し、表面化し、障害からうまく回復できるレジリエントな環境の構築に、さらに深く取り組む必要がある。\r\n  - コンプライアンス\r\n    - ロジック的にテナント分離は実現されていても、インフラを共有するため、顧客がこの運用を嫌がる可能性がある\r\n    - これはコンプライアンスの遵守や規制が厳しい事業ドメインで特に顕著\r\n      - このような場合は、システムの一部をサイロ化する必要あり\r\n        - ブリッジ型を参照のこと","createdAt":"2024-01-09T08:22:57Z","updatedAt":"2024-01-09T08:22:57Z","id":"IC_kwDOK-znbM5wNjSp"},{"body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/the-bridge-model.html\r\n\r\n## Core isolation concepts - The bridge model \r\n\r\n- サイロ型やプール型は分離に対して非常に明確なアプローチであるが、SaaS プロバイダ的には分離の見方はそれほど絶対的なものではない\r\n- 実際のアプリケーションを見てシステムをより小さなサービスに分解していくと、サイロ型とプール型両方のアプローチが混在が必要なことがわかる\r\n  - これをブリッジ型と呼ぶ\r\n- 図(元サイト参照のこと)だと\r\n  - Web層は共通\r\n  - ビジネスロジックのあるアプリケーション層とDBは個別\r\n- このモノリスをマイクロサービスに分割しようと思うと、各種マイクロサービスはサイロ型とプール型が混在するだろうことが想像できる\r\n- AWS の各機能を利用してどの用にサイロ型やプール型を実装していくかについては、また別の項で説明する\r\n- 重要なことは、サイロとプールの見方は、様々な分離要件を持つサービスの集まりに分解された環境では、より細かくなるということ\r\n- Pros and Cons\r\n  - ブリッジ型はサイロ型とプール型のハイブリッドで、それぞれの機能に適した実装を選択することができる\r\n  - サイロ型の価値観や信条はシステムの各領域に依然として適用される\r\n  - Pros and Cons を考える歳は、アーキテクチャの各リソースやレイヤについて、サイロ型・プール型のトレードオフを考える必要がある","createdAt":"2024-01-09T10:13:58Z","updatedAt":"2024-01-09T10:13:58Z","id":"IC_kwDOK-znbM5wOPi9"}]}
