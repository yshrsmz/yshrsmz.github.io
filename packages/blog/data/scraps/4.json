{"number":4,"id":"I_kwDOK-znbM57e4mO","title":"SaaS のテナント分離戦略について","body":"https://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/saas-tenant-isolation-strategies.html\r\n\r\nこれ読む","state":"open","tags":["SaaS"],"originUrl":"https://github.com/yshrsmz/scraps/issues/4","createdAt":"2024-01-09T06:11:04Z","updatedAt":"2024-01-09T06:32:41Z","comments":[{"body":"## The isolation mindset\r\n\r\nhttps://docs.aws.amazon.com/whitepapers/latest/saas-tenant-isolation-strategies/the-isolation-mindset.html\r\n\r\n- 分離はオプショナルではない\r\n  - 分離は SaaS の基本的な構成要素である\r\n  - マルチテナント型 SaaS のプロバイダは、テナントのリソースを分離するための方策を取る必要がある\r\n- 認証/認可と分離は別物\r\n  - ログイン管理/アクセス管理を下からと言ってリソースを分離したことにはならない\r\n  - 分離というパズルのピースの一つであるけど、それだけで充分ではない\r\n- 分離の実装/強制は SaaS 利用者に委ねてはならない\r\n  - 分離を侵害するようなコードを書くとは思わないが、確実ではない。\r\n  - そもそもそのようなことが起こらないように、アクセススコープの管理は分離規則を管理する共通の処理によって行われるべき\r\n    - SaaS 利用者に委ねない、ということ\r\n- 分離のための既存のソリューションがなければ自作する必要がある\r\n  - AWS Identity や IAM など、テナント分離を容易にするソリューションは多数存在する\r\n  - これらを組み合わせることでテナント分離をある程度シンプルに実現できることもある\r\n  - しかし、既存のソリューションが適さない場合ももちろんある。\r\n  - だからといってそれがテナント分離の要件を引き下げる理由になってはならない。なければ自作すること\r\n- 分離はリソースレベルの構成要素ではない\r\n  - マルチテナントと分離の文脈では、分離を具体的なインフラリソースの境界と見る向きもある\r\n    - これはDB、ECS、VPCなどのインフラ全体をテナント毎に運用することに繋がる\r\n    - 確かにこれはよくある分離の形態のひとつであるが、テナント分離の実現方法はこれだけではない\r\n  - 各種リソースを共用するような場合においても、テナント分離は実現できる\r\n    - このようなリソース共有型のモデルでも、分離は論理的な構成要素として、ランタイムに実現可能\r\n  - 要点: 分離はリソースのサイロ化によってのみ実現するものではない\r\n- 事業ドメインによっては特定の分離要件がある\r\n  - テナント分離のアプローチは様々あるが、事業ドメインによっては特定のアプローチが必要な場合もある\r\n  - 例えば高いコンプライアンスが求められる業界では、ポリシーベースの分離では不十分で、テナント毎にDBを用意する必要があるかもしれない。","createdAt":"2024-01-09T06:32:40Z","updatedAt":"2024-01-09T06:32:40Z","id":"IC_kwDOK-znbM5wNHVN"}]}
